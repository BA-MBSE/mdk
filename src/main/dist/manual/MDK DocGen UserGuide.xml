<?xml version="1.0" encoding="UTF-8" ?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<pubdate>Mon Apr 23 16:42:08 PDT 2018</pubdate>
<title>DocGen User's Guide</title>
<legalnotice><title>"This Document has not been reviewed for export control. Not for distribution to or access by foreign persons." </title><para>"Paper copies of this document may not be current and should not be relied on for official purposes. JPL/Caltech proprietary. Not for public release."</para></legalnotice>
<collab><org>
<orgname>Jet Propulsion Laboratory</orgname>
<orgdiv>California Institute of Technology</orgdiv>
<uri>https://div27.jpl.nasa.gov/2740/files/logos/jpl_logo(220x67).gif</uri>
<address><alt>36px</alt></address>
</org></collab></info>
<chapter xml:id="_18_0_2_bec02f9_1444944948911_779834_74342">
<info><title>DocGen</title></info>
 
  <para>The&#160;
   <mms-cf mms-cf-type="name" mms-element-id="_18_0_2_bec02f9_1444944948911_779834_74342">
    [cf:DocGen User's Guide -.name]
   </mms-cf>&#160;is a more in depth guide to the purpose and function of&#160;DocGen.</para> 
  <para>For specific information about the different DocGen methods and expression libraries, see 
   <mms-view-link mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_2_bec02f9_1444944929890_569178_72814">
    [cf:Create Viewpoint Methods.vlink]
   </mms-view-link>.</para>  
  <para><emphasis role="bold">Table of Contents </emphasis> 
   <mms-view-link mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_2_bec02f9_1444944939844_226498_73113">
    [cf:DocGen Overview.vlink]
   </mms-view-link> 
   <mms-view-link mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_2_bec02f9_1444944939845_300460_73114">
    [cf:Install DocGen.vlink]
   </mms-view-link> 
   <mms-view-link mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_2_bec02f9_1444944906261_224764_70945">
    [cf:Create offline content using DocGen.vlink]
   </mms-view-link> 
   <mms-view-link mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_2_bec02f9_1444944929890_569178_72814">
    [cf:Create Viewpoint Methods.vlink]
   </mms-view-link> 
   <mms-view-link mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_2_bec02f9_1444944906259_897463_70941">
    [cf:DocGen UserScripts.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_2_bec02f9_1444944939844_226498_73113">
<info><title>DocGen Overview</title></info>
 
  <para>The Document Generator (DocGen) is a module of MDK plug-in in MagicDraw. It provides the capability to generate formal documents from UML/SysML models in MagicDraw. &#160;A &quot;document&quot; is a view into a model, or a representation of model data, which may be structured in a hierarchical way. A document is a collection of paragraphs, sections, and analysis, and the order and layout of the content is important. DocGen operates within MagicDraw, traversing document's &quot;outline&quot;, collecting information, performing analysis, and writing the output to a file. DocGen produces a DocBook XML file, which may be fed into transformation tools to produce the document in PDF, HTML, or other formats.</para> 
  <para>DocGen consists of:</para> 
  <itemizedlist spacing="compact"> 
   <listitem><para>a UML profile with elements for creating a document framework</para></listitem> 
   <listitem><para>a set of scripts for traversing document frameworks, conducting analysis, and producing the output</para></listitem> 
   <listitem><para>a set of tools to help users validate the correctness and completeness of their documents.</para></listitem> 
  </itemizedlist> 
  <para>Users need&#160;to invest the time to define the document content and format; however, once this is done the document can be produced with a button click whenever the model data is updated. The user never has to waste time numbering sections or fighting with reluctant formatting, as this is all performed automatically during the transformation to PDF, HTML, etc. DocGen can also be extended and queries may be added in a form of reusable analysis functions. Check with your project to see if they have a document framework to use.</para>  
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944939845_300460_73114">
<info><title>Install DocGen</title></info>
 
  <para>DocGen is a part of the MDK plugin. If you have installed an EMS-provided version of MagicDraw (i.e. Crushinator), this is already included and the following install steps are not applicable. If you are using the SSCAE download (provided on the MBSE community of practice webpage), you will need to install the MDK plugin.</para> 
  <para><emphasis role="bold">Install:</emphasis></para> 
  <orderedlist spacing="compact"> 
   <listitem><para>Download the latest MDK plugin from the&#160;
    <mms-cf mms-cf-type="name" mms-element-id="_18_0_5_bec02f9_1470354092736_24713_70942" data-non-editable="false">
     [cf:Access and Downloads.name]
    </mms-cf> table on the <a href="https://cae-ems.jpl.nasa.gov/alfresco/mmsapp/mms.html#/workspaces/master/sites/site__18_0_2_bec02f9_1447344987423_308379_105124" title="Model Development Kit (MDK)">MDK Site.</a></para></listitem> 
   <listitem><para>Download the mdk-version.zip file from the 
    <mms-cf mms-cf-type="name" mms-element-id="_18_0_2_bec02f9_1447117376007_753183_38890">
     [cf:Artifactory.name]
    </mms-cf> link. <emphasis role="bold">Do not unzip the file.</emphasis></para></listitem> 
   <listitem><para>Start MagicDraw, go to Help-&gt;Resource/Plugin Manager <imageobject><imagedata fileref="/alfresco/service/api/node/content/workspace/SpacesStore/ea2707be-f24c-43e8-8014-2fd4e023986b/img_1454092928055.png" width="536" scalefit="1"/></imageobject></para></listitem> 
   <listitem><para>Click on Import and choose the zip file. Restart MagicDraw.</para></listitem> 
  </orderedlist> 
  <para><emphasis role="bold">Add module&#160;to project</emphasis>:</para> 
  <orderedlist spacing="compact"> 
   <listitem><para>Open or create a project. Go to Options-&gt;Modules.</para></listitem> 
   <listitem><para>Click on Use Module and select the SysML Extensions.mdxml file (this should be in the md.install/profiles/MDK directory) <imageobject><imagedata fileref="/alfresco/service/api/node/content/workspace/SpacesStore/2210bdd8-c8d6-43ac-8c29-55b37ab5a097/img_1454093574165.png" width="668" scalefit="1"/></imageobject></para></listitem> 
   <listitem><para>Now you can use the stereotypes from Document Profile, inside DocGen&gt;MDK EMP Client</para></listitem> 
  </orderedlist> 
  <para><emphasis role="bold">You should only need to add the module once per project. If you install an updated plug-in, you don't always have to re-add the module to the project. The model will prompt you if it cannot find the module.</emphasis></para>  
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944906261_224764_70945">
<info><title>Create Offline Content Using DocGen</title></info>
 
  <para>If a model is not available in EMS server, an offline document can be created using the DocGen module in MDK plug-in.&#160;This section describes how to produce offline, read-only documents in MagicDraw. Note that these documents are not editable like those published in EMS. All changes must be made directly in the MagicDraw model.</para> 
 
<section xml:id="_18_0_2_bec02f9_1444944939843_349259_73112">
<info><title>Generate Documents</title></info>
 
  <para>DocGen allow generating a local version of your document without access to EMS server. Select a document, and use a right click menu &quot;DocGen&gt;Generate DocGen3 Document&quot;. It will generate a DocBook XML file. Check with your project to see if there is a preferred method of generation. Most practitioners use a .xml viewer such as oXygen to convert the .xml file to a PDF&#160;file (or other types of files if they prefer). You can install oXygen from the SSCAE. Note that the document is static. If you want to change the document, changes need to made to the MagicDraw model and document needs to be regenerated.&#160;</para> 
  <para>To open your .xml output with oXygen, first obtain a copy of the mgss.xsl&#160;stylesheet from MBEE (if you downloaded the bundled installation of Crushinator from MBEE, you can find mgss.xsl in the install folder under DocGenUserScripts -&gt; DocGenStyleSheet). Open your oXygen install directory, navigate to &lt;oxygen_dir&gt;/frameworks/docbook/xsl/fo, and save mgss.xsl to that directory. This stylesheet will allow the front matter inputs from MagicDraw to be visible on the PDF.&#160;</para> 
  <para>Now you can open your saved .xml output file with oXgen. After opening your file, right click the &quot;DocBook PDF&quot; option&#160;within transformation scenarios, as pictured below.&#160;In the menu that appears, select &quot;Duplicate.&quot;&#160;Rename your new scenario as desired.&#160;Select the XSL URL text box and replace &quot;${frameworks}/docbook/xsl/fo/docbook_custom.xsl&quot; with ${frameworks}/docbook/xsl/fo/mgss.xsl,&quot; as pictured below, and then click &quot;OK.&quot;</para> 
  <para><imageobject><imagedata fileref="/alfresco/service/api/node/content/workspace/SpacesStore/721af36a-120d-4246-a5d4-9827bf8fd227/img_1454100347851.png" alt="" width="489" height="491" scalefit="1"/></imageobject>&#160;<imageobject><imagedata fileref="/alfresco/service/api/node/content/workspace/SpacesStore/e3ae7d96-fde0-4323-be1f-7480a391fd8b/img_1454100347728.png" alt="" width="471" height="439" scalefit="1"/></imageobject></para>  
  <para>To generate a new PDF, double-click on your newly created&#160;transformation in the Transformation Scenarios window. You can also click the red &quot;play&quot; button if your DocBook PDF is selected as shown below to generate a PDF.</para> 
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944939842_808565_73110">
<info><title>Use the DocGen Stylesheet</title></info>
 
  <para>The DocGen stylesheet allows the user to input front matter information to a document. To input the information you would like to add as front matter, navigate to the specification window of a document block. (The easiest way is to double click on the document block.) Scroll down in the specification window to the &quot;FrontMatter&quot; section, as shown below.</para>  
  <para>Here, you can specify a variety of fields such as logo size and location, approvers, legal footers, etc.&#160;A reference card for the tags is shown below.</para> 
 
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444944929890_569178_72814">
<info><title>Create Viewpoint Methods</title></info>
 
  <para>Creating a viewpoint involves two steps. First, create a viewpoint element. Second, define a viewpoint method diagram for the viewpoint.</para> 
  <para>After both are created and defined, the viewpoint can be applied to a view. The following subsections explain each step in more details, including the DocGen and expression methods offered by the Cookbook library.</para>  
 
<section xml:id="_18_0_2_bec02f9_1444944964081_177189_75536">
<info><title>Collect/Sort/Filter Model Elements</title></info>
 
  <para>Once exposed to a view, elements can can be operated on by three types of viewpoint operators (Collect, Sort, and Filter). These operations can be used to expand or narrow the collection of elements that are used in the viewpoint method.&#160;</para> 
  <para>The following views reveal the View Diagrams, Viewpoint Method Diagrams, and Block Definition Diagrams that - when generated - result in the&#160;contained subviews.</para> 
  <para>Below is an overview table of the DocGen Methods (specifically Collect/Sort/Filter Methods) discussed.</para>  
 
<table frame="all" pgwide="1" role="longtable">
<title>DocGen Methods</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Method Name</entry><entry>Method Description</entry></row>
</thead>
<tbody>
<row><entry><para>CollectOwnedElements Infinite Depth</para>
</entry><entry> 
  <para>&quot;CollectOwnedElements&quot; gathers anything owned by the exposed element(s) in the model to be used in the viewpoint method.</para> 
  <para>This specific method deals with infinite depth, which means it collects <emphasis role="bold">all</emphasis> owned elements, as opposed to those just on a <emphasis role="bold">specified</emphasis> depth (such as level 1 children).</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068171_606770_80557">
    [cf:CollectOwnedElements.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectOwnedElements Single Depth</para>
</entry><entry> 
  <para>&quot;CollectOwnedElements&quot; gathers anything owned by the exposed element(s) in the model to be used in the viewpoint method.</para> 
  <para>This specific method deals with a single depth, which means it collects the children of a <emphasis role="bold">specified</emphasis> depth, as opposed to <emphasis role="bold">all</emphasis> children.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068171_606770_80557">
    [cf:CollectOwnedElements.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectOwners</para>
</entry><entry> 
  <para>&quot;CollectOwners&quot; is essentially the opposite of &quot;CollectOwnedElements&quot;. It gathers all of the owners (from the containment tree) of the exposed element(s) for use in the viewpoint method.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068173_92249_80558">
    [cf:CollectOwners.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectThingsOnDiagram</para>
</entry><entry> 
  <para>&quot;CollectThingsOnDiagram&quot; will collect all the elements depicted on a diagram.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068176_264642_80561">
    [cf:CollectThingsOnDiagram.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectByStereotypeProperties List</para>
</entry><entry> 
  <para>&quot;CollectByStereotypeProperties&quot; collects the properties of the stereotypes.</para> 
  <para>This specific method collects the properties of the stereotype &quot;List&quot;.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068178_213199_80562">
    [cf:CollectByStereotypeProperties.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectByStereotypeProperties Table</para>
</entry><entry> 
  <para>&quot;CollectByStereotypeProperties&quot; collects the properties of the stereotypes.</para> 
  <para>This specific method collects the properties of the stereotype &quot;Table&quot;.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068178_213199_80562">
    [cf:CollectByStereotypeProperties.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectByDirectedRelationshipMetaclasses Direction Out</para>
</entry><entry> 
  <para>CollectByDirectedRelationshipMetaclasses action collects elements based on the relationships that other elements use to connect to them.</para> 
  <para>This specific method collects elements based on their &quot;Direction Out&quot; relationships.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068182_493060_80563">
    [cf:CollectByDirectedRelationshipMetaclasses.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectByDirectedRelationshipMetaclasses Direction In</para>
</entry><entry> 
  <para>CollectByDirectedRelationshipMetaclasses action collects elements based on the relationships that other elements use to connect to them.</para> 
  <para>This specific method collects elements based on their &quot;Direction In&quot; relationships.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068182_493060_80563">
    [cf:CollectByDirectedRelationshipMetaclasses.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectByDirectedRelationshipStereotypes</para>
</entry><entry> 
  <para>&quot;CollectByDirectedRelationshipStereotypes&quot; also collects elements based on the <emphasis role="bold">stereotype</emphasis>of the relationships that connect them to other elements.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068186_895381_80564">
    [cf:CollectByDirectedRelationshipStereotypes.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectByAssociation</para>
</entry><entry> 
  <para>&quot;CollectByAssociation&quot; collects the blocks with aggregation of either composite, shared, or none.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068189_984572_80565">
    [cf:CollectByAssociation.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectTypes</para>
</entry><entry> 
  <para>CollectTypes collects the types of already collected elements. Most times, CollectOwned Elements or CollectOwners are used to collect said elements.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068191_818440_80566">
    [cf:CollectTypes.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectClassifierAttributes</para>
</entry><entry> 
  <para>&quot;CollectClassifierAttributes&quot; collects attributes of a class.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068193_466453_80567">
    [cf:CollectClassifierAttributes.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>CollectByExpression</para>
</entry><entry> 
  <para>&quot;CollectByExpression&quot; is a more customized approach to querying a model using Object Constraint Language (OCL) .</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068195_297564_80568">
    [cf:CollectByExpression.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>FilterByDiagramType Image</para>
</entry><entry> 
  <para>The &quot;FilterByDiagramType&quot; activity goes through a data set and looks at the elements which are diagrams. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068209_458298_80583">
    [cf:FilterByDiagramType.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>FilterByNames</para>
</entry><entry> 
  <para>&quot;FilterByNames&quot; activity goes through a data set and finds all the elements within the data set with a particular name or the elements connected to the element with the particular name. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068212_508560_80585">
    [cf:FilterByNames.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>FilterByMetaclasses</para>
</entry><entry> 
  <para>&quot;FilterByMetaclasses&quot; activity goes through a data set and finds all the elements that has are defined by a specified metaclass. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068216_577421_80587">
    [cf:FilterByMetaclasses.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>FilterByStereotypes</para>
</entry><entry> 
  <para>&quot;FilterByStereotypes&quot; activity goes through a data set and finds all the elements that has are defined by a specified Stereotype. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068219_742182_80589">
    [cf:FilterByStereotypes.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>FilterByExpression</para>
</entry><entry> 
  <para>&quot;FilterByExpression&quot; activity goes through a data set and finds all the elements that satisfy (boolean) a Object constraint Language (OCL) expression. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068222_680201_80591">
    [cf:FilterByExpression.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>SortByAttribute</para>
</entry><entry> 
  <para>&quot;SortByAttribute&quot; allows the user to sort a data set by the chosen attribute: name, documentation, value.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068225_989063_80593">
    [cf:SortByAttribute.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>SortByProperty</para>
</entry><entry> 
  <para>&quot;SortByProperty&quot; allows the user to sort a data set by a specified property.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068228_748958_80595">
    [cf:SortByProperty.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>SortByExpression</para>
</entry><entry> 
  <para>&quot;SortByExpression&quot; a data set as specified by the Object constraint Language (OCL) expression.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068230_944030_80596">
    [cf:SortByExpression.vlink]
   </mms-view-link></para>  
 
</entry></row>
</tbody>
</tgroup>
</table>
<section xml:id="_18_0_2_bec02f9_1444945068107_497358_80530">
<info><title>Collect</title></info>
 
  <para>&quot;Collect...&quot; is a viewpoint operator that separates the elements in an exposed package into ones that will continue to be used and ones that will be ignored. There are a number of collection methods, each of which have their own call behavior action in the side bar of the viewpoint method diagram.</para> 
 
<section xml:id="_18_0_2_bec02f9_1444945068171_606770_80557">
<info><title>CollectOwnedElements</title></info>
<para>   
 </para>
 
  <para>CollectOwnedElements gathers anything owned by the exposed element(s) in the model to be used in the viewpoint method. A common use case would be when a group of elements contained within a package need to be exposed to a view. Instead of individually exposing each element, a user can employ &quot;CollectOwnedElements&quot; within a viewpoint and then expose only the package. The collection method will look at the exposed element&#160;and return all the elements that it owns.</para> 
  <para>The views 
   <mms-view-link class="mceNonEditable" mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_5_8e90292_1455234855115_417260_54101">
    [cf:Single Depth Example.vlink]
   </mms-view-link> and 
   <mms-view-link class="mceNonEditable" mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_5_8e90292_1454452254211_425429_59117">
    [cf:Infinite Depth Example.vlink]
   </mms-view-link>&#160;show the output of the&#160;
   <mms-cf mms-cf-type="name" class="mceNonEditable" mms-element-id="_18_0_5_8e90292_1454452241027_121237_58882">
    [cf:Example View Diagram -.name]
   </mms-cf>&#160;as shown below. Both of these views expose the same&#160;
   <mms-cf mms-cf-type="name" class="mceNonEditable" mms-element-id="_18_0_5_8e90292_1455233190486_799349_53554">
    [cf:Lunchbox -.name]
   </mms-cf>, but they conform to different viewpoints. The only difference between the viewpoints is the &quot;DepthChoosable&quot; property:&#160;
   <mms-cf mms-cf-type="name" class="mceNonEditable" mms-element-id="_18_0_5_8e90292_1455235116426_389652_54301">
    [cf:CollectOwnedElements Single Depth -.name]
   </mms-cf>&#160;has a DepthChoosable of 1,&#160;
   <mms-cf mms-cf-type="name" class="mceNonEditable" mms-element-id="_18_0_5_8e90292_1455236518743_873764_54877">
    [cf:CollectOwnedElements Infinite Depth -.name]
   </mms-cf>&#160;has a DepthChoosable of 0.</para> 
  <para>Note that CollectOwnedElements collects part properties as well. For this example we use&#160;
   <mms-cf mms-cf-type="name" class="mceNonEditable" mms-element-id="_18_0_2_bec02f9_1444945068219_742182_80589">
    [cf:FilterByStereotypes -.name]
   </mms-cf>&#160;to only display Block elements in the output.</para> 
 
<figure xml:id="_18_0_5_8e90292_1454452241027_121237_58882" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454452241043_973119_58902.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454452241043_973119_58902.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455233071911_554596_53437" pgwide="1"><title>Example Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455233071924_373360_53457.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455233071924_373360_53457.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455235116426_389652_54301" pgwide="1"><title>CollectOwnedElements Single Depth</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455235116444_83979_54322.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455235116444_83979_54322.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectOwnedElements&quot; gathers anything owned by the exposed element(s) in the model to be used in the viewpoint method.</para> 
  <para>This specific method deals with a single depth, which means it collects the children of a <emphasis role="bold">specified</emphasis> depth, as opposed to <emphasis role="bold">all</emphasis> children.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068171_606770_80557">
    [cf:CollectOwnedElements.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455236518743_873764_54877" pgwide="1"><title>CollectOwnedElements Infinite Depth</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455236518756_966036_54898.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455236518756_966036_54898.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectOwnedElements&quot; gathers anything owned by the exposed element(s) in the model to be used in the viewpoint method.</para> 
  <para>This specific method deals with infinite depth, which means it collects <emphasis role="bold">all</emphasis> owned elements, as opposed to those just on a <emphasis role="bold">specified</emphasis> depth (such as level 1 children).</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068171_606770_80557">
    [cf:CollectOwnedElements.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1455234855115_417260_54101">
<info><title>Single Depth Example</title></info>
<para>In this example, we expose the owned elements only at a depth of one. The result is in the following bulleted list.</para>
<orderedlist spacing="compact">
<listitem>
<para>Sandwich Bag</para>
</listitem>
<listitem>
<para>Thermos</para>
</listitem>
<listitem>
<para>Bag of Chips</para>
</listitem>
<listitem>
<para>Cake</para>
</listitem>
</orderedlist>
</section>
<section xml:id="_18_0_5_8e90292_1454452254211_425429_59117">
<info><title>Infinite Depth Example</title></info>
<para></para>
<orderedlist spacing="compact">
<listitem>
<para>Sandwich Bag</para>
</listitem>
<listitem>
<para>Sandwich</para>
</listitem>
<listitem>
<para>Thermos</para>
</listitem>
<listitem>
<para>Bag of Chips</para>
</listitem>
<listitem>
<para>Cake</para>
</listitem>
<listitem>
<para>Nail File</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068173_92249_80558">
<info><title>CollectOwners</title></info>
<para> </para>
 
  <para>&quot;CollectOwners&quot; is essentially the opposite of &quot;CollectOwnedElements&quot;. It gathers all of the owners (from the containment tree) of the exposed element(s) for use in the viewpoint method. Using a different&#160;block &quot;Target&quot;, this returns the path of ownership in the containment tree. It starts with the direct ownership package (Example Elements) and progresses back to the entire model (Data) because the &quot;DepthChoosable&quot; was set at 0 (infinite).</para> 
  <para>
   <mms-view-link class="mceNonEditable" mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_5_8e90292_1454452955132_899789_59901">
    [cf:Example View.vlink]
   </mms-view-link> shows the output of the following diagrams.</para> 
 
<figure xml:id="_18_0_5_8e90292_1454452945446_749231_59701" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454452945465_364577_59721.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454452945465_364577_59721.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1454452955137_22419_59908" pgwide="1"><title>CollectOwners</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454452955146_784034_59928.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454452955146_784034_59928.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectOwners&quot; is essentially the opposite of &quot;CollectOwnedElements&quot;. It gathers all of the owners (from the containment tree) of the exposed element(s) for use in the viewpoint method.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068173_92249_80558">
    [cf:CollectOwners.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1454452955158_962425_59939" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454452955168_896843_59959.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454452955168_896843_59959.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1454452955132_899789_59901">
<info><title>CollectOwners Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Owner</para>
</listitem>
<listitem>
<para>Example Elements</para>
</listitem>
<listitem>
<para>CollectOwners</para>
</listitem>
<listitem>
<para>Collect</para>
</listitem>
<listitem>
<para>Create Viewpoint Methods Examples</para>
</listitem>
<listitem>
<para>Models</para>
</listitem>
<listitem>
<para>Docgen</para>
</listitem>
<listitem>
<para>Data</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068176_264642_80561">
<info><title>CollectThingsOnDiagram</title></info>
<para>   
 </para>
 
  <para>CollectThingsOnDiagram will collect all the elements depicted on a diagram. To demonstrate this, the 
   <mms-cf mms-cf-type="name" class="mceNonEditable" mms-element-id="_18_0_5_8e90292_1454452955158_962425_59939">
    [cf:Example BDD -.name]
   </mms-cf> was exposed. Note that the name of each element as well as the viewpoint method itself is listed below. Names are often not automatically created with an element,&#160;so these must be inserted in the model. Otherwise a &quot;no content for...&quot; message will appear in the name's spot.</para> 
 
<figure xml:id="_18_0_5_8e90292_1454456065971_2480_62058" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454456066012_784236_62078.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454456066012_784236_62078.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1454456071670_25054_62261" pgwide="1"><title>CollectThingsOnDiagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454456071679_550225_62281.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454456071679_550225_62281.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectThingsOnDiagram&quot; will collect all the elements depicted on a diagram.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068176_264642_80561">
    [cf:CollectThingsOnDiagram.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1454456071695_480655_62296" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454456071706_282696_62316.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454456071706_282696_62316.png"/></imageobject>
</mediaobject></figure>
 
  <para>Another element not shown on this diagram will not be picked up by this method.</para> 
 
<section xml:id="_18_0_5_8e90292_1454456071692_865447_62291">
<info><title>CollectThingsOnDiagram Example View</title></info>
<para></para>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068178_213199_80562">
<info><title>CollectByStereotypeProperties</title></info>
 
  <para>This collection action allows a user to get at a specified property value(s) of a stereotype. This might be helpful when multiple different values are specified for a single stereotype property. It is important to note that this functionality does not work with string values and will return only one element value. In other words, if there are duplicate values for the same property, the duplicates will be removed from the returned values set. The list below shows the elements found in the &quot;Example Elements&quot; package. Several of these characters have the stereotype &lt;&lt;Human&gt;&gt;. This particular stereotype has a property (orange dot) named &quot;Gender&quot; and is typed &quot;Element&quot; (also shown below).</para>   
  <para>The character &quot;Billy&quot; has the &lt;&lt;Human&gt;&gt; stereotype and you would like to know the value of this stereotype's property &quot;Gender&quot;. By exposing the list above to the activity diagram diagram below, you are able to extract the values of all characters stereotyped&#160; &lt;&lt;Human&gt;&gt; who's value has been specified. Notice, in the activity below, the CollectByStereotypeProperties action is specified to collect only the property &quot;Gender&quot;. In this example ONLY Billy's gender value has been set, the rest of the characters were left the same, thus, the expected outcome should be one value.&#160;</para> 
 
 
  <para>CollectByStereotypeProperties collects the properties of the stereotypes. The following views&#160;
   <mms-view-link class="mceNonEditable" mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_5_8e90292_1454457828761_957314_63140">
    [cf:Bulleted List Example.vlink]
   </mms-view-link>&#160;and&#160;
   <mms-view-link class="mceNonEditable" mms-doc-id="_18_0_2_bec02f9_1444944948911_779834_74342" data-mms-element-id="_18_0_5_8e90292_1455314454546_441460_45170">
    [cf:Table Structure Example.vlink]
   </mms-view-link>&#160;show the output of the view structure described in the Example View Diagram below.&#160;</para> 
 
<figure xml:id="_18_0_5_8e90292_1454457821814_233872_62913" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454457821828_598068_62933.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454457821828_598068_62933.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1454457828739_928994_63110" pgwide="1"><title>CollectByStereotypeProperties List</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454457828747_355758_63130.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454457828747_355758_63130.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectByStereotypeProperties&quot; collects the properties of the stereotypes.</para> 
  <para>This specific method collects the properties of the stereotype &quot;List&quot;.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068178_213199_80562">
    [cf:CollectByStereotypeProperties.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1454457828763_433069_63143" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454457828772_920368_63163.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454457828772_920368_63163.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455314540334_702746_45259" pgwide="1"><title>CollectByStereotypeProperties Table</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455314540349_91748_45280.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455314540349_91748_45280.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectByStereotypeProperties&quot; collects the properties of the stereotypes.</para> 
  <para>This specific method collects the properties of the stereotype &quot;Table&quot;.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068178_213199_80562">
    [cf:CollectByStereotypeProperties.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1454457828761_957314_63140">
<info><title>Bulleted List Example</title></info>
<orderedlist spacing="compact">
<listitem>
<para>SampleElement2</para>
</listitem>
<listitem>
<para>SampleElement2</para>
</listitem>
</orderedlist>
</section>
<section xml:id="_18_0_5_8e90292_1455314454546_441460_45170">
<info><title>Table Structure Example</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Example Table</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Element Name</entry><entry>someElem</entry></row>
</thead>
<tbody>
<row><entry><para>Block1</para>
</entry><entry><para>SampleElement2</para>
</entry></row>
<row><entry><para>Block2</para>
</entry><entry><para>SampleElement2</para>
</entry></row>
<row><entry><para>Block3</para>
</entry><entry><para>SampleElement2</para>
</entry></row>
<row><entry><para>Block4</para>
</entry><entry><para>SampleElement2</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068182_493060_80563">
<info><title>CollectByDirectedRelationshipMetaclasses</title></info>
<para>   
 </para>
 
  <para>CollectByDirectedRelationshipMetaclasses action collects elements based on the relationships that other elements use to connect to them. Note that in the example, Helo and Athena are connected to Hera with a &quot;Dependency&quot; (the dashed arrowed line). In other words, Hera depends on Helo and Athena. These are the only dependencies in the example, so if I expose the Example Elements package, collect the owned elements, and then use this operator with the metaclass &quot;Dependency&quot;, only Helo and Athena will be collected. Note the origin of the dependency - Hera - is NOT collected with this operator.</para> 
  <para>Selecting [...] under MetaclassChoosable in the specification will open the element selector, allowing the selection of the desired metaclass. Make sure the metaclass option is selected in the lower left corner or else metaclasses will not show in the search. &#160;Also keep in mind that depending on the extensions, plug-ins, etc. that you are using in Magic Draw, there might be multiple metaclasses with the same name (i.e. the built-in one and additional custom ones). Be careful to select the metaclass you are using in the model. The final results of this operator are shown in the following views.</para> 
 
<figure xml:id="_18_0_5_8e90292_1454983326135_420915_47600" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454983326149_491410_47620.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454983326149_491410_47620.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1454983379078_873780_47807" pgwide="1"><title>CollectByDirectedRelationshipMetaclasses Direction Out</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454983379087_454291_47827.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454983379087_454291_47827.png"/></imageobject>
</mediaobject></figure>
 
  <para>CollectByDirectedRelationshipMetaclasses action collects elements based on the relationships that other elements use to connect to them.</para> 
  <para>This specific method collects elements based on their &quot;Direction Out&quot; relationships.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068182_493060_80563">
    [cf:CollectByDirectedRelationshipMetaclasses.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455318132555_308589_47913" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455318132568_563119_47933.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455318132568_563119_47933.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455319281120_685108_48324" pgwide="1"><title>CollectByDirectedRelationshipMetaclasses Direction In</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455319281129_296627_48345.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455319281129_296627_48345.png"/></imageobject>
</mediaobject></figure>
 
  <para>CollectByDirectedRelationshipMetaclasses action collects elements based on the relationships that other elements use to connect to them.</para> 
  <para>This specific method collects elements based on their &quot;Direction In&quot; relationships.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068182_493060_80563">
    [cf:CollectByDirectedRelationshipMetaclasses.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1454983379073_4930_47798">
<info><title>Direction Out Example</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Athena</para>
</listitem>
<listitem>
<para>Helo</para>
</listitem>
</orderedlist>
</section>
<section xml:id="_18_0_5_8e90292_1455319171320_569911_48235">
<info><title>Direction In Example</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Hera</para>
</listitem>
<listitem>
<para>Athena</para>
</listitem>
</orderedlist>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068254_40099_80606">
<info><title>Direction Out</title></info>
 
  <para>In the previous part of this example, the specification has the option &quot;Direction Out&quot; as undefined. This is the default setting but once you click on it you can chose between true and false. The default value, corresponding to undefined, is &quot;true&quot; and produces the results in the previous part of this example. This part of the example shows what happens when &quot;Direction Out&quot; is set to false.</para>
  <para>When a directed relationship is used, one block is the &quot;source&quot; of the relationship and the other is the &quot;target&quot;. The target can be thought of as the block with the &quot;arrowhead&quot; portion of the relationship. However, there is another set of terms where the block with the &quot;arrowhead&quot; is referred to as the &quot;supplier&quot; and the other end is referred to as the &quot;client&quot;. When &quot;Direction Out&quot; was set to true, the &quot;target&quot; (also known as &quot;supplier&quot;) values were returned. Thus logically, when &quot;Direction Out&quot; is set to false, the &quot;source&quot; (also known as &quot;client&quot;) values should be returned. The directionality of the dependency relationship can be confusing for new users and it may be helpful to instead think of it in terms which are dependent and which are independent. The blocks at the arrowhead (target/supplier) end of the dependency relationship are independent while the blocks at the end with no arrow (source/client) are dependent. In this case, we would expect Hera, the dependent block, to be on this list.</para>
  <para>However, if you look at the output list at the bottom of this page, more elements than just Hera are returned.&#160; What is really odd is that these elements correspond to sections of this document instead of the example character blocks we had been working with.&#160; This is due to how the model software conducts its search and we will explain below.&#160; It unfortunately makes this a complicated example, but this is an important point to understand.&#160; It will be especially helpful if you find yourself trying to troubleshoot a situation where the elements returned are not what you expected.</para>
  <para>First if you recall in the initial discussion of how to set up a view point, the section&#160;
   <mms-cf mms-cf-type="name" mms-element-id="_17_0_2_3_c0902ff_1396908968249_349568_57789">
    [cf:Link to View and Expose Content.name]
   </mms-cf> explains that you choose the section of the model you want to work with. In this example we were working with the &quot;Example Elements&quot; package.&#160; However, the examples for&#160;
   <mms-cf mms-cf-type="name" mms-element-id="_17_0_2_3_c0902ff_1397070965413_88861_57833">
    [cf:CollectOwnedElements.name]
   </mms-cf> and&#160;
   <mms-cf mms-cf-type="name" mms-element-id="_17_0_2_3_c0902ff_1397081331828_749528_63257">
    [cf:CollectOwners.name]
   </mms-cf> only exposed the Eights block from the Example Elements package.</para>
  <para>For the first part of this collect by directed relationship metaclass&#160;example&#160;(the simple part), the only elements with a complete dependency relationship within the &quot;Example Elements&quot; package were Athena, Helo, and Hera. &#160;However, some other elements, such as the Eights block, had dependency relationships that were not completely contained in the Example Elements package.&#160; It was previously mentioned that the &quot;expose&quot; relationship is a stereotype of the &quot;dependency&quot; relationship.&#160; Thus since we had chosen the dependency relationship for this example, the dependency stereotypes, such as &quot;expose&quot;, also meet the search criteria.&#160; When the viewpoints for the previous examples &quot;exposed&quot; the Eights block to create the portions of this document, they also created dependency relationships.</para>
  <para>Now the next question is why parts of those relationships across the package boundary only appeared in this list output and not earlier when the &quot;Direction Out&quot; was &quot;true&quot;.&#160; That requires an understanding of how the model conducts its search.&#160;&#160;</para>
  <para><emphasis role="underline">Search Steps</emphasis></para>
  <orderedlist spacing="compact">
   <listitem><para>Within the content that is exposed by the viewpoint, the CollectByDirectedRelationshipMetaclasses action searches for the contained elements.</para></listitem>
   <listitem><para>It then checks the relationships associated with the elements.&#160;&#160;</para></listitem>
   <listitem><para>Next, it checks the direction of those relationships to see if it corresponds with the &quot;Direction Out&quot; value that you had specified. </para></listitem>
   <listitem><para>The last step is that the search follows the relationship and outputs what is at the other end of the relationship.</para></listitem>
  </orderedlist>
  <para>When &quot;Direction Out&quot; was set to &quot;true&quot;, the search went through the &quot;Example Elements&quot; package, found all the blocks with dependency relationships for which the block was the &quot;source&quot; of the relationship, followed the relationship connection, and listed the &quot;target&quot; elements.</para>
  <para>When the &quot;Direction Out&quot; is set to &quot;false&quot;, the search went through the &quot;Example Elements&quot; package, found all the blocks with dependency relationships for which the block was the &quot;target&quot; of the relationship, followed the relationship connection back, and listed the &quot;source&quot; elements.&#160; In this case, since the Eights block is listed as the &quot;target&quot; of the various &quot;expose&quot; dependency relationships, the search followed the connection, even though it was outside the &quot;Example Elements&quot; package.&#160; That is why the list at the bottom of the screen has entries other than just Hera as we would expect.</para>
  <para>If you just wanted the elements within the &quot;Example Elements&quot; package, you could create a filter like the one shown in the image below.&#160; If the filter were to be connected, then the list would just output Hera.</para> 
 
<figure xml:id="_18_0_2_bec02f9_1444945003097_279596_77334" pgwide="1"><title>CollectByDirectedRelationshipMetaclasses Viewpoint Method Two</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945003134_908342_77356.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945003134_908342_77356.png"/></imageobject>
</mediaobject></figure>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068186_895381_80564">
<info><title>CollectByDirectedRelationshipStereotypes</title></info>
 
  <para>CollectByDirectedRelationshipStereotypes also collects elements based on the relationships that connect them to other elements. However, here the collection is by the stereotype of the relationship instead of the metaclass (as in the previous section).</para>  
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1454984528445_265852_48538" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454984528481_241517_48558.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454984528481_241517_48558.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1454984534090_945487_48739" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454984534099_279764_48759.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454984534099_279764_48759.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1454984534113_429215_48773" pgwide="1"><title>CollectByDirectedRelationshipStereotypes</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1454984534121_100497_48793.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1454984534121_100497_48793.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectByDirectedRelationshipStereotypes&quot; also collects elements based on the <emphasis role="bold">stereotype</emphasis>of the relationships that connect them to other elements.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068186_895381_80564">
    [cf:CollectByDirectedRelationshipStereotypes.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1454984534086_896752_48734">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>This Will Show</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068189_984572_80565">
<info><title>CollectByAssociation</title></info>
<para>   
 </para>
 
  <para>CollectByAssociation collects the blocks with aggregation of either composite, shared, or none. In other words, both white diamond associations (shared) and black diamond associations (composite) can be collected by this action. The CollectByAssociation action will then collect only those blocks that have the aggregation type as noted in the specification for CollectByAssociation block.</para> 
  <para>In the view diagram, this view exposes the 
   <mms-cf mms-cf-type="name" class="mceNonEditable" mms-element-id="_18_0_5_8e90292_1455644795646_434156_41993">
    [cf:Sample Element.name]
   </mms-cf>&#160;and conforms to the CollectByAssociation&#160;viewpoint method. The result of this viewpoint method is shown in the following view.</para> 
 
<figure xml:id="_18_0_5_8e90292_1455212076054_877595_41507" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455212076080_570069_41527.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455212076080_570069_41527.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455212081201_563682_41730" pgwide="1"><title>CollectByAssociation</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455212081215_666617_41750.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455212081215_666617_41750.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectByAssociation&quot; collects the blocks with aggregation of either composite, shared, or none.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068189_984572_80565">
    [cf:CollectByAssociation.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455644782329_537767_41959" pgwide="1"><title>Example Elements</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455644782343_352957_41979.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455644782343_352957_41979.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455212081197_783518_41723">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Example Table</title>
<tgroup cols="3" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Composite</entry><entry>Shared</entry><entry>None</entry></row>
</thead>
<tbody>
<row><entry><para>Directed Composition</para>
<para>Composition</para>
</entry><entry><para>Directed Aggregation</para>
<para>Aggregation</para>
</entry><entry><para>Directed Association</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068191_818440_80566">
<info><title>CollectTypes</title></info>
<para>   
 </para>
 
  <para>CollectTypes collects types. In this case, the CollectOwnedElements or CollectOwners needs to be used to collect elements before CollectTypes. Then, CollectTypes will collect the type associated with each element. The viewpoint method diagram is shown below.</para> 
 
<figure xml:id="_18_0_5_8e90292_1455212839933_716158_42259" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455212839952_542730_42279.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455212839952_542730_42279.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455212846981_7147_42456" pgwide="1"><title>CollectTypes</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455212846989_531689_42476.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455212846989_531689_42476.png"/></imageobject>
</mediaobject></figure>
 
  <para>CollectTypes collects the types of already collected elements. Most times, CollectOwned Elements or CollectOwners are used to collect said elements.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068191_818440_80566">
    [cf:CollectTypes.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455212847002_611231_42487" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455212847016_770961_42507.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455212847016_770961_42507.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455212847029_540594_42518">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Classifiers</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name</entry><entry>Type</entry></row>
</thead>
<tbody>
<row><entry><para>b</para>
</entry><entry><para>Braking System</para>
</entry></row>
<row><entry><para>c</para>
</entry><entry><para>Chassis</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068193_466453_80567">
<info><title>CollectClassifierAttributes</title></info>
<para>   
 </para>
 
  <para>CollectClassifierAttributes collects attributes of a class. To use this operation, we do not need to use CollectOwnedElements or CollectOwners, unlike in previous sections. The results are displayed in the following Example View table.</para> 
 
<figure xml:id="_18_0_5_8e90292_1455213281545_680459_43086" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455213281563_80012_43106.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455213281563_80012_43106.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455213288573_716127_43285" pgwide="1"><title>CollectClassifierAttributes</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455213288582_91481_43305.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455213288582_91481_43305.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectClassifierAttributes&quot; collects attributes of a class.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068193_466453_80567">
    [cf:CollectClassifierAttributes.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455213288592_346058_43316" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455213288601_466782_43336.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455213288601_466782_43336.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455213288569_623248_43280">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Owned Items</title>
<tgroup cols="3" align="left" colsep="1" rowsep="1">
<colspec colname="1" colnum="1"/>
<colspec colname="2" colnum="2"/>
<colspec colname="3" colnum="3"/>
<thead>
<row><entry morerows="1">Item Name</entry><entry namest="2" nameend="3">Classifier Attributes</entry></row>
<row><entry>Attribute Name</entry><entry>Attribute Value</entry></row>
</thead>
<tbody>
<row><entry><para>Item</para>
</entry><entry><para>num</para>
<para>other</para>
</entry><entry><para>4.0</para>
<para>5.0</para>
</entry></row>
<row><entry><para>Other</para>
</entry><entry><para>text</para>
</entry><entry><para>"this"</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068195_297564_80568">
<info><title>CollectByExpression</title></info>
 
  <para>CollectByExpression is a more customized approach to querying a model using Object Constraint Language (OCL) .</para> 
 
<figure xml:id="_18_0_5_8e90292_1455213587932_320007_43768" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455213587949_176192_43788.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455213587949_176192_43788.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455213593559_519088_43965" pgwide="1"><title>CollectByExpression</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455213593567_610042_43985.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455213593567_610042_43985.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;CollectByExpression&quot; is a more customized approach to querying a model using Object Constraint Language (OCL) .</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068195_297564_80568">
    [cf:CollectByExpression.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455213593580_847565_43996" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455213593589_99580_44016.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455213593589_99580_44016.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455213593602_309711_44027">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Target</para>
</listitem>
</orderedlist>
</section>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068114_215246_80531">
<info><title>Filter</title></info>
 
  <para>The Filter operations allow the user to narrow fields of data to the data of interest according to one or multiple filter criteria of various types (such as stereotype, name, metaclasses, etc). For most applications, the &quot;FilterBy...&quot; operation needs to have a &quot;CollectBy...&quot; operation preceding it so the filter operation has a data set to look through and filter.&#160;</para>
  <para>The following sections will take a look at the various Filter operations, what they do, how to set up the operation, and what the output could look like. The examples to follow are simpler than you would likely use with a real project, and they are meant to be simple to explain the basic principles that can be used to create the more complicated outputs you may require.</para> 
 
<section xml:id="_18_0_2_bec02f9_1444945068209_458298_80583">
<info><title>FilterByDiagramType</title></info>
 
  <para>The FilterByDiagramType activity goes through a data set and looks at the elements which are diagrams. The user can decide which type of diagram is of interest to them, and display the names of only those diagrams in their document.</para>  
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1455663597023_362823_50599" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455663597043_252207_50619.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455663597043_252207_50619.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455663601861_456624_50796" pgwide="1"><title>Diagrams</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455663601870_885450_50816.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455663601870_885450_50816.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455663601884_255331_50830" pgwide="1"><title>FilterByDiagramType Image</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455663601891_688580_50850.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455663601891_688580_50850.png"/></imageobject>
</mediaobject></figure>
 
  <para>The &quot;FilterByDiagramType&quot; activity goes through a data set and looks at the elements which are diagrams. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068209_458298_80583">
    [cf:FilterByDiagramType.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1455663601858_289374_50793">
<info><title>Image Example</title></info>
<figure pgwide="1"><title>Diagrams</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455663601870_885450_50816.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455663601870_885450_50816.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455666736401_602289_54836" pgwide="1"><title>Some Block</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455666736409_82323_54856.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455666736409_82323_54856.png"/></imageobject>
</mediaobject></figure>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068212_508560_80585">
<info><title>FilterByNames</title></info>
 
  <para>We will now illustrate the use of the &quot;FilterByNames&quot; operation, which allows the user to find all the elements within the data set with a particular name or the elements connected to the element with the particular name. In this case, we will use the regular expression &quot;Bat.*&quot; to gather all elements whose names start with &quot;Bat&quot;</para> 
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1455672111546_79568_55566" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455672111565_700516_55586.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455672111565_700516_55586.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455672115989_395516_55761" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455672116000_734366_55781.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455672116000_734366_55781.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455672116013_24172_55797" pgwide="1"><title>FilterByNames</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455672116022_646122_55817.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455672116022_646122_55817.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;FilterByNames&quot; activity goes through a data set and finds all the elements within the data set with a particular name or the elements connected to the element with the particular name. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068212_508560_80585">
    [cf:FilterByNames.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1455672116011_877599_55792">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Batman</para>
</listitem>
<listitem>
<para>Batgirl</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068216_577421_80587">
<info><title>FilterByMetaclasses</title></info>
 
  <para>FilterByMetaclasses allows filtering of elements by metaclasses. As with the previous Filter operations, a Collect operation must be used first to collect elements desired to be filtered. In the example below, the CollectOwnedElements will be used again; this time, we will collect the elements&#160;owned by the block&#160;&quot;Example Elements.&quot; The FilterByMetaclasses operation is then used to show the actors in this subset of elements.</para>  
  <para>After dragging a &quot;FilterByMetaclasses&quot; block onto the diagram, go&#160;to the specification window for the &quot;FilterByMetaclasses&quot; block. In this window, check the &quot;true&quot; box under &quot;IncludeChoosable.&quot; As with the previous examples, checking this box means we want to include the metaclasses we are going to choose to filter.&#160; Next, we go to the &quot;MetaclassesChoosable&quot; section in the specification window, and click the &quot;...&quot; button . A &quot;Select Class&quot; window will appear. In this window, make sure the small box in the bottom left hand corner is selected to allow metaclasses to be shown in the selection box. Now, we can navigate to &quot;UML Standard Profile&quot; -&gt; &quot;UML2 Metamodel&quot; -&gt; select &quot;Actor&quot; -&gt; and click the &quot;+&quot; button. We could also have chosen the &quot;Stereotype&quot; metaclass, for example, or a number of other metaclasses.</para> 
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1455673438013_845970_57536" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455673438027_776154_57556.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455673438027_776154_57556.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455673443558_569927_57735" pgwide="1"><title>FilterByMetaclasses</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455673443567_337252_57755.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455673443567_337252_57755.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;FilterByMetaclasses&quot; activity goes through a data set and finds all the elements that has are defined by a specified metaclass. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068216_577421_80587">
    [cf:FilterByMetaclasses.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455673443581_583737_57766" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455673443591_822135_57786.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455673443591_822135_57786.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455673443554_565196_57730">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Some Actor</para>
</listitem>
<listitem>
<para>Another Actor</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068219_742182_80589">
<info><title>FilterByStereotypes</title></info>
 
  <para>FilterByStereotypes allows filtering of elements by the stereotype(s) applied to them.</para>  
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1455673695063_354454_58171" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455673695086_583054_58191.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455673695086_583054_58191.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455673704008_357177_58370" pgwide="1"><title>FilterByStereotypes</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455673704017_26912_58390.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455673704017_26912_58390.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;FilterByStereotypes&quot; activity goes through a data set and finds all the elements that has are defined by a specified Stereotype. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068219_742182_80589">
    [cf:FilterByStereotypes.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455673704029_750432_58401" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455673704037_890940_58421.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455673704037_890940_58421.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455673704005_852164_58365">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Item</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068222_680201_80591">
<info><title>FilterByExpression</title></info>
 
  <para>FilterByExpression is a more customized approach to querying a model using Object Constraint Language (OCL). The expression value is simply a boolean written in OCL.</para> 
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1455674409799_600114_59411" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455674409816_264161_59431.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455674409816_264161_59431.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455674414768_882801_59610" pgwide="1"><title>FilterByExpression</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455674414775_851817_59630.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455674414775_851817_59630.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;FilterByExpression&quot; activity goes through a data set and finds all the elements that satisfy (boolean) a Object constraint Language (OCL) expression. A Collect operation must be used first to collect elements desired to be filtered.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068222_680201_80591">
    [cf:FilterByExpression.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455674414786_993128_59641" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455674414795_388634_59661.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455674414795_388634_59661.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455674414764_273657_59605">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Not Named Block</para>
</listitem>
<listitem>
<para>This Also Isn't Named Block</para>
</listitem>
</orderedlist>
</section>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068118_605296_80532">
<info><title>Sort</title></info>
 
  <para>The Sort operations allow a data set to be sorted according to a desired parameter. Data can be sorted either by attribute, property, or expression. These Sort operations are illustrated below. As with the Filter operations, it is necessary for us to Collect elements in some way in order to have a data set to sort.&#160;</para> 
 
<section xml:id="_18_0_2_bec02f9_1444945068225_989063_80593">
<info><title>SortByAttribute</title></info>
 
  <para>&quot;SortByAttribute&quot; allows the user to sort a data set by the chosen attribute. The list of attributes that can be sorted include name, documentation, or value. With this operation, only one attribute is choosable at a time for sort. In the &quot;FilterByStereotypes&quot; example, it was highlighted that a Sort operation was necessary if a user would like to alphabetize the output of a viewpoint method.</para>  
  <para>In the specification window for &quot;SortByAttribute,&quot; we choose the &quot;Name&quot; option from the drop-down menu under the &quot;AttributeChoosable&quot; section. Ensure &quot;Reverse&quot; is false.</para> 
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1455675592170_381785_61168" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455675592184_299272_61188.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455675592184_299272_61188.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455675597653_314678_61367" pgwide="1"><title>SortByAttribute</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455675597661_757073_61387.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455675597661_757073_61387.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;SortByAttribute&quot; allows the user to sort a data set by the chosen attribute: name, documentation, value.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068225_989063_80593">
    [cf:SortByAttribute.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455675597673_49821_61398" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455675597682_196753_61418.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455675597682_196753_61418.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455675597649_370105_61362">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Alpha</para>
</listitem>
<listitem>
<para>Beta</para>
</listitem>
<listitem>
<para>Gamma</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068228_748958_80595">
<info><title>SortByProperty</title></info>
<para></para>
<figure xml:id="_18_0_5_8e90292_1455675866357_827933_61824" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455675866374_790575_61844.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455675866374_790575_61844.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455675873070_394132_62021" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455675873080_273124_62041.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455675873080_273124_62041.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455675873091_537189_62055" pgwide="1"><title>SortByProperty</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455675873097_857086_62075.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455675873097_857086_62075.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;SortByProperty&quot; allows the user to sort a data set by a specified property.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068228_748958_80595">
    [cf:SortByProperty.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1455675873067_751012_62018">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Should Be First</para>
</listitem>
<listitem>
<para>Should Be Third</para>
</listitem>
<listitem>
<para>Should Be Second</para>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068230_944030_80596">
<info><title>SortByExpression</title></info>
 
  <para>SortByExpression is a more customized approach to querying a model using Object Constraint Language (OCL).</para>  
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1455676363021_909248_62486" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455676363032_549300_62506.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455676363032_549300_62506.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455676368303_186137_62683" pgwide="1"><title>SortByExpression</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455676368311_468986_62703.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455676368311_468986_62703.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;SortByExpression&quot; a data set as specified by the Object constraint Language (OCL) expression.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068230_944030_80596">
    [cf:SortByExpression.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1455676368324_64634_62714" pgwide="1"><title>Example BDD</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455676368336_597713_62734.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455676368336_597713_62734.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455676368348_919784_62745">
<info><title>Example View</title></info>
<orderedlist spacing="compact">
<listitem>
<para>Super</para>
</listitem>
<listitem>
<para>Not Super</para>
</listitem>
</orderedlist>
</section>
</section>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444944964084_465461_75540">
<info><title>Present Model Data</title></info>
 
  <para>After the data is collected, filtered, and/or sorted, several operators can be used to adjust how the data will be displayed. &#160;The presentation element operators are table, image, paragraph, list, and sections.&#160; These are used in the viewpoint method diagram and determine the formatting that will be displayed in the document views.</para> 
  <para>The following examples all use a common Zoo package, that has an assortment of elements to serve as samples. The examples that deal with OCL use a Robot Zoo package in order to demonstrate&#160;different behavior.</para> 
 
<table frame="all" pgwide="1" role="longtable">
<title>DocGen Methods</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Method Name</entry><entry>Method Description</entry></row>
</thead>
<tbody>
<row><entry><para>SimpleTable</para>
</entry><entry> 
  <para>The manual demonstrates constructing a &quot;simple&quot; table made of attribute columns is created using the given DocGen Table methods.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068121_677605_80533">
    [cf:Table.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>ComplexTable</para>
</entry><entry> 
  <para>The manual demonstrates constructing a &quot;complex&quot; table made of an attribute column and a table column group using the given DocGEn Table methods.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068121_677605_80533">
    [cf:Table.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Generic Paragraph</para>
</entry><entry> 
  <para>Paragraph is a presentation element designed to display text. By default (aka the Generic Paragraph), displays the documentation of the exposed elements or of the view itself.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068136_65485_80539">
    [cf:Paragraph.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Paragraph of Name</para>
</entry><entry> 
  <para>Paragraph is a presentation element designed to display text. The &quot;Paragraph of Name&quot; displays the <emphasis role="bold">name</emphasis> attribute of the exposed elements or of the view itself.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068136_65485_80539">
    [cf:Paragraph.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Paragraph of Documentation</para>
</entry><entry> 
  <para>Paragraph is a presentation element designed to display text. The &quot;Paragraph of Documentation&quot; displays the <emphasis role="bold">documentation</emphasis> attribute of the exposed elements or of the view itself. It will produce the same result of the Generic Paragraph, but is simply another way to specify it.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068136_65485_80539">
    [cf:Paragraph.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Paragraph of Default Value</para>
</entry><entry> 
  <para>Paragraph is a presentation element designed to display text. The &quot;Paragraph of Default Value&quot; displays the <emphasis role="bold">value</emphasis> attribute of the exposed elements or of the view itself.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068136_65485_80539">
    [cf:Paragraph.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Paragraph Body</para>
</entry><entry> 
  <para>Paragraph is a presentation element designed to display text. The <emphasis role="bold">body</emphasis> is text (can be HTML) that isspecified in the Paragraph specification and then the &quot;Paragraph Body&quot; displays that body.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_5_8e90292_1456185471526_772171_50540">
    [cf:Paragraph Action with Body.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Paragraph OCL With Targets</para>
</entry><entry> 
  <para>Paragraph is a presentation element designed to display text. By using Object Constraint Language (OCL) and establishing targets, a more specified paragraph can be created according to said expression.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_5_8e90292_1456187205310_776152_51457">
    [cf:Paragraph Action Evaluate OCL.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Paragraph OCL Without Targets</para>
</entry><entry> 
  <para>Paragraph is a presentation element designed to display text. By using Object Constraint Language (OCL) a more specified paragraph can be created according to said expression, even <emphasis role="bold">without</emphasis> targets.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_5_8e90292_1456187205310_776152_51457">
    [cf:Paragraph Action Evaluate OCL.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Paragraph OCL For Targets</para>
</entry><entry> 
  <para>Paragraph is a presentation element designed to display text. By using Object Constraint Language (OCL), a more specified paragraph can be created according to said expression.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_5_8e90292_1456187205310_776152_51457">
    [cf:Paragraph Action Evaluate OCL.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Bulleted List</para>
</entry><entry> 
  <para>&quot;BulletedList&quot; creates lists based on the model elements exposed to the behavior. What information is displayed depends on the options selected in the behavior's specification and the filters applied to the collected data.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068133_160509_80538">
    [cf:List.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Image</para>
</entry><entry> 
  <para>Image Elements can be displayed in view editor by the use of the &quot;Image&quot; action. An example of an Image Element is a Diagram.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068124_569028_80534">
    [cf:Image.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Dynamic Section</para>
</entry><entry> 
  <para>&quot;Dynamic sectioning&quot; is the creation of viewpoint method defined sections. They are created using the &quot;Structured Query&quot; activity in the viewpoint method diagram.</para> 
  <para>This specific example shows the creation of a single section.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068128_505663_80535">
    [cf:Dynamic Sectioning.vlink]
   </mms-view-link></para>  
 
</entry></row>
<row><entry><para>Multiple Sections</para>
</entry><entry> 
  <para>&quot;Dynamic sectioning&quot; is the creation of viewpoint method defined sections. They are created using the &quot;Structured Query&quot; activity in the viewpoint method diagram.</para> 
  <para>This specific example shows the creation of multiple sections.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068128_505663_80535">
    [cf:Dynamic Sectioning.vlink]
   </mms-view-link></para>  
 
</entry></row>
</tbody>
</tgroup>
</table>
<section xml:id="_18_0_2_bec02f9_1444945068121_677605_80533">
<info><title>Table</title></info>
 
  <para>The sections below go over how to create tables. Tables of varying complexity can be created in MagicDraw, but these tables share some common base components. The left sidebar gives various components for use under &quot;Table Structure.&quot;</para> 
  <para>The first option, TableStructure, is used in all cases to create the table base. The last three options shown under &quot;Table Structure&quot; in the sidebar allow the user to select a type of column based on the information they need to display in each column. TableExpressionColumn uses an OCL expression. TablePropertyColumn allows stereotype properties or value properties of a class to be displayed, depending on the what the user chooses. The TableAttributeColumn allows the user to display the name, documentation, or value of an element. Clicking the small black arrow on the right of these options on the sidebar opens a set of selections where the second one has a dotted outside line on the icon. This dotted outside line selection exists for each of the three column types and allows the user to configure a flow within the column. The TableColumnGroup allows creating a column group with a merged header, as will be illustrated in the Complex Table selection.</para> 
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1455730284135_317538_53268" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455730284150_399223_53288.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455730284150_399223_53288.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1455730289980_26623_53519" pgwide="1"><title>SimpleTable</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455730289990_67668_53539.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455730289990_67668_53539.png"/></imageobject>
</mediaobject></figure>
 
  <para>The manual demonstrates constructing a &quot;simple&quot; table made of attribute columns is created using the given DocGen Table methods.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068121_677605_80533">
    [cf:Table.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1456251179209_549325_45378" pgwide="1"><title>ComplexTable</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456251179218_885524_45399.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456251179218_885524_45399.png"/></imageobject>
</mediaobject></figure>
 
  <para>The manual demonstrates constructing a &quot;complex&quot; table made of an attribute column and a table column group using the given DocGEn Table methods.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068121_677605_80533">
    [cf:Table.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1456250755569_546584_44849">
<info><title>Simple Table</title></info>
 
  <para>This viewpoint method is used to create a simple table that shows the name and documentation of all the Animals in the Zoo package. First we collect all elements owned by the Zoo package. Then we filter out all elements that are not &lt;&lt;Animal&gt;&gt;. This leaves the five animal elements, which we pass into a TableStructure.</para> 
  <para>The first column we create shows the Name attribute of the animal elements. We call this column &quot;Animal Name&quot; which will become the header of the column when we generate the document or reveal on ViewEditor. We select &quot;Name&quot; as the desiredAttribute in the TableAttributeColumn Action.</para> 
  <para>We do the same thing for the next column &quot;Description&quot; except that we set desiredAttribute to &quot;Documentation&quot; to target a different attribute of the Animal element.</para> 
 
<table frame="all" pgwide="1" role="longtable">
<title>Simple Table Example</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Animal Name</entry><entry>Description</entry></row>
</thead>
<tbody>
<row><entry><para>Ostrich</para>
</entry><entry><para>Ostriches can run up to 70 km/h, the fastest land speed of any bird.</para>
</entry></row>
<row><entry><para>Crocodile</para>
</entry><entry><para>Basically a dinosaur.</para>
</entry></row>
<row><entry><para>Zebra</para>
</entry><entry><para>Zebras feed almost entirely on grasses.</para>
</entry></row>
<row><entry><para>Seal</para>
</entry><entry><para>Mostly blubber.</para>
</entry></row>
<row><entry><para>Arctic Tern</para>
</entry><entry><para>What sound does an arctic tern make?</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="_18_0_5_8e90292_1456251128921_440645_45294">
<info><title>Complex Table</title></info>
<table frame="all" pgwide="1" role="longtable">
<title></title>
<tgroup cols="3" align="left" colsep="1" rowsep="1">
<colspec colname="1" colnum="1"/>
<colspec colname="2" colnum="2"/>
<colspec colname="3" colnum="3"/>
<thead>
<row><entry morerows="1">Diet</entry><entry namest="2" nameend="3"></entry></row>
<row><entry>Animal</entry><entry>Exhibit</entry></row>
</thead>
<tbody>
<row><entry><para>Carnivore</para></entry><entry><para>Crocodile</para>
</entry><entry><para>Africa Exhibit</para>
</entry></row>
<row><entry><para>Carnivore</para></entry><entry><para>Seal</para>
</entry><entry><para>Antarctica Exhibit</para>
</entry></row>
<row><entry><para>Carnivore</para></entry><entry><para>Arctic Tern</para>
</entry><entry><para>Antarctica Exhibit</para>
</entry></row>
<row><entry><para>Herbivore</para></entry><entry><para>Zebra</para>
</entry><entry><para>Africa Exhibit</para>
</entry></row>
<row><entry><para>Omnivore</para></entry><entry><para>Ostrich</para>
</entry><entry><para>Africa Exhibit</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068136_65485_80539">
<info><title>Paragraph</title></info>
 
  <para>Paragraph is a presentation element designed to display text. Every view requires a viewpoint method, if one is not specified the default method is a single paragraph action targeting the documentation of the view element. This is added automatically without being visible to the user.</para> 
  <para>This section describes advanced ways you can: create paragraphs, combine paragraphs with other viewpoint method actions, and generate paragraphs using OCL.</para> 
  <para>Paragraph is a combination of the features of Image and Table. It is similar to an image in that it will display the documentation of any element that is exposed by the view. It also has some advanced expression features that allow it to additionally display the attributes of an element exposed by a view (similar to TableAttributeColumn) or result of an expression (similar to TableExpressionColumn).</para> 
  <para>In general the results of a paragraph allow greater flexibility to display view editor editable content from that model than information displayed within the rigid constraints of an Image or Table.</para> 
  <para>The following sections describe various ways a paragraph can be used.</para> 
 
<section xml:id="_18_0_5_8e90292_1456181701249_427024_49201">
<info><title>Paragraph Action with Targets</title></info>
<para></para>
<figure xml:id="_18_0_5_8e90292_1456180493538_72778_48476" pgwide="1"><title>Generic Paragraph View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456180493552_637244_48496.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456180493552_637244_48496.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1456180498625_319245_48693" pgwide="1"><title>Generic Paragraph</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456180498636_841209_48713.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456180498636_841209_48713.png"/></imageobject>
</mediaobject></figure>
 
  <para>Paragraph is a presentation element designed to display text. By default (aka the Generic Paragraph), displays the documentation of the exposed elements or of the view itself.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068136_65485_80539">
    [cf:Paragraph.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1456184212560_174247_50112" pgwide="1"><title>Paragraph of Name</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456184212570_290834_50133.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456184212570_290834_50133.png"/></imageobject>
</mediaobject></figure>
 
  <para>Paragraph is a presentation element designed to display text. The &quot;Paragraph of Name&quot; displays the <emphasis role="bold">name</emphasis> attribute of the exposed elements or of the view itself.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068136_65485_80539">
    [cf:Paragraph.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1456183997018_629490_49835" pgwide="1"><title>Paragraph of Documentation</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456183997028_736083_49856.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456183997028_736083_49856.png"/></imageobject>
</mediaobject></figure>
 
  <para>Paragraph is a presentation element designed to display text. The &quot;Paragraph of Documentation&quot; displays the <emphasis role="bold">documentation</emphasis> attribute of the exposed elements or of the view itself. It will produce the same result of the Generic Paragraph, but is simply another way to specify it.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068136_65485_80539">
    [cf:Paragraph.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1456191947356_721515_53526" pgwide="1"><title>Paragraph of Default Value</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456191947368_817625_53547.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456191947368_817625_53547.png"/></imageobject>
</mediaobject></figure>
 
  <para>Paragraph is a presentation element designed to display text. The &quot;Paragraph of Default Value&quot; displays the <emphasis role="bold">value</emphasis> attribute of the exposed elements or of the view itself.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068136_65485_80539">
    [cf:Paragraph.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1456180498650_472762_48723">
<info><title>Generic Paragraph Example</title></info>
<para>Ostriches can run up to 70 km/h, the fastest land speed of any bird.</para>
<para>Basically a dinosaur.</para>
<para>Zebras feed almost entirely on grasses.</para>
<para>Mostly blubber.</para>
<para>What sound does an arctic tern make?</para>
</section>
<section xml:id="_18_0_5_8e90292_1456183851515_787685_49654">
<info><title>Paragraph Name Example</title></info>
<para>Africa Exhibit</para>
<para>Ostrich</para>
<para>Crocodile</para>
<para>Zebra</para>
<para>Antarctica Exhibit</para>
<para>Seal</para>
<para>Arctic Tern</para>
<para>hasTitleBlock</para>
</section>
<section xml:id="_18_0_5_8e90292_1456183868639_66571_49708">
<info><title>Paragraph Documentation Example</title></info>
<para>Ostriches can run up to 70 km/h, the fastest land speed of any bird.</para>
<para>Basically a dinosaur.</para>
<para>Zebras feed almost entirely on grasses.</para>
<para>Mostly blubber.</para>
<para>What sound does an arctic tern make?</para>
</section>
<section xml:id="_18_0_5_8e90292_1456191899074_823805_53437">
<info><title>Paragraph Value Example</title></info>
<para>Omnivore</para><para>Carnivore</para><para>Herbivore</para><para>Carnivore</para><para>Carnivore</para></section>
</section>
<section xml:id="_18_0_5_8e90292_1456185471526_772171_50540">
<info><title>Paragraph Action with Body</title></info>
<para></para>
<figure xml:id="_18_0_5_8e90292_1456185530576_318734_50619" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456185530598_194264_50639.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456185530598_194264_50639.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1456185539219_550478_50816" pgwide="1"><title>Paragraph Body</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456185539229_287012_50836.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456185539229_287012_50836.png"/></imageobject>
</mediaobject></figure>
 
  <para>Paragraph is a presentation element designed to display text. The <emphasis role="bold">body</emphasis> is text (can be HTML) that isspecified in the Paragraph specification and then the &quot;Paragraph Body&quot; displays that body.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_5_8e90292_1456185471526_772171_50540">
    [cf:Paragraph Action with Body.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1456185539244_785191_50846">
<info><title>Paragraph Body Example</title></info>
<para>We should put more animals in the zoo.</para>
</section>
</section>
<section xml:id="_18_0_5_8e90292_1456187205310_776152_51457">
<info><title>Paragraph Action Evaluate OCL</title></info>
<para></para>
<figure xml:id="_18_0_5_8e90292_1456186843082_613060_51215" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456186843095_570139_51235.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456186843095_570139_51235.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1456186851895_843486_51414" pgwide="1"><title>Paragraph OCL With Targets</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456186851902_302955_51434.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456186851902_302955_51434.png"/></imageobject>
</mediaobject></figure>
 
  <para>Paragraph is a presentation element designed to display text. By using Object Constraint Language (OCL) and establishing targets, a more specified paragraph can be created according to said expression.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_5_8e90292_1456187205310_776152_51457">
    [cf:Paragraph Action Evaluate OCL.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1456189104847_313340_52471" pgwide="1"><title>Paragraph OCL Without Targets</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456189104856_254549_52492.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456189104856_254549_52492.png"/></imageobject>
</mediaobject></figure>
 
  <para>Paragraph is a presentation element designed to display text. By using Object Constraint Language (OCL) a more specified paragraph can be created according to said expression, even <emphasis role="bold">without</emphasis> targets.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_5_8e90292_1456187205310_776152_51457">
    [cf:Paragraph Action Evaluate OCL.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1456190428004_97074_52889" pgwide="1"><title>Paragraph OCL For Targets</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456190428017_320791_52910.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456190428017_320791_52910.png"/></imageobject>
</mediaobject></figure>
 
  <para>Paragraph is a presentation element designed to display text. By using Object Constraint Language (OCL), a more specified paragraph can be created according to said expression.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_5_8e90292_1456187205310_776152_51457">
    [cf:Paragraph Action Evaluate OCL.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1456189043917_500720_52382">
<info><title>Paragraph With Body</title></info>
<para>Paragraph With Body</para>
</section>
<section xml:id="_18_0_5_8e90292_1456186851891_824987_51409">
<info><title>Paragraph With Targets</title></info>
<para>true</para>
<para>false</para>
</section>
<section xml:id="_18_0_5_8e90292_1456189988390_453361_52791">
<info><title>Paragraph With Body And Targets</title></info>
<para>Robot Moose</para>
<para>Robot Squirrel</para>
</section>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068133_160509_80538">
<info><title>List</title></info>
 
  <para>&quot;BulletedList&quot; creates lists based on the model elements exposed to the behavior.&#160; This one presentation element can create either an ordered (numbered) list, like the one shown below, or a bulleted list like those that have been displayed in previous examples.&#160; What information is displayed (names, documentation, stereotype property values) depends on the options selected in the behavior's specification and the filters applied to the collected data. For example, when &quot;Show Targets&quot; is &quot;true&quot;, the name of the element is listed.</para> 
  <para>The viewpoint method diagram below shows the diagram that was used to create the below example list.&#160; The exposed package was &quot;Zoo&quot; from previous examples and a filter was applied to only identify the &lt;&lt;Animal&gt;&gt;&#160;stereotypes.&#160; To create this example, &quot;Ordered List&quot; was selected to be &quot;true&quot; in order to create a numbered list.&#160; If that option had been false, then the list would be bulleted instead.&#160; Inside the bulleted list specification, there are a number of other options.&#160; If you click on an option, an explanation appears in the bottom box.</para> 
  <para>NOTE: &quot;Show Stereotype Property Names&quot; currently doesn't work.&#160; It theoretically prints out the stereotype property name before listing its values.</para> 
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1456266295005_661445_45480" pgwide="1"><title>Example List View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456266295034_594069_45500.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456266295034_594069_45500.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1456266303009_308653_45729" pgwide="1"><title>Bulleted List</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456266303020_776589_45749.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456266303020_776589_45749.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;BulletedList&quot; creates lists based on the model elements exposed to the behavior. What information is displayed depends on the options selected in the behavior's specification and the filters applied to the collected data.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068133_160509_80538">
    [cf:List.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1456266323539_417966_45779">
<info><title>Example List</title></info>
<itemizedlist spacing="compact">
<listitem>
<para>Ostrich</para>
</listitem>
<listitem>
<para>Crocodile</para>
</listitem>
<listitem>
<para>Zebra</para>
</listitem>
<listitem>
<para>Seal</para>
</listitem>
<listitem>
<para>Arctic Tern</para>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068124_569028_80534">
<info><title>Image</title></info>
 
  <para> Image Elements can be displayed in view editor by the use of the &lt;&lt;Image&gt;&gt; action. An example of an Image Element is a Diagram. This action will display the image associated with any Image Element followed by its documentation. If multiple diagrams are exposed or collected, a single &lt;&lt;Image&gt;&gt; action will iteratively display them all.</para>
  <para>This image will then be updated when the model is updated without need for a new image to be put into the document to reflect changes. It is also possible to add captions and titles to the image, however, these functionalities are not currently working.</para>
  <para>The View Diagram and Viewpoint Method Diagram for this operation are shown below.</para> 
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1456267036084_846894_46351" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456267036095_845130_46371.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456267036095_845130_46371.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1456267049267_668899_46550" pgwide="1"><title>Image</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456267049275_538896_46570.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456267049275_538896_46570.png"/></imageobject>
</mediaobject></figure>
 
  <para>Image Elements can be displayed in view editor by the use of the &quot;Image&quot; action. An example of an Image Element is a Diagram.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068124_569028_80534">
    [cf:Image.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1456267049263_296715_46545">
<info><title>Image Example View</title></info>
<figure xml:id="_18_0_5_8e90292_1456169060841_280127_43645" pgwide="1"><title>Zoo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456169060864_844823_43665.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456169060864_844823_43665.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_6_bec02f9_1485206878812_111389_237614" pgwide="1"><title>Zoo Animals</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1485206878825_494930_237628.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1485206878825_494930_237628.png"/></imageobject>
</mediaobject></figure>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945068128_505663_80535">
<info><title>Dynamic Sectioning</title></info>
 
  <para>Dynamic sectioning is the creation of viewpoint method defined sections.&#160; They are created using the &quot;Structured Query&quot; activity in the viewpoint method diagram.</para> 
  <para>This section describes two main types of dynamic sectioning: the creation of a single section and the creation of multiple sections.&#160; The new dynamic section(s) can be distinguished from a standard &lt;&lt;view&gt;&gt; in the table of contents by a small page symbol, &sect;. Notice that the dynamic section(s) also load into the view at the same time as the parent view.</para> 
  <para>For these examples, the package &quot;Animals&quot;, first introduced in the paragraph examples, was exposed.&#160; Each of the five animal elements consists of an element title and some documentation text.</para> 
  <para>These sections have two main uses, basic organization allowing sections to be broken up. Formally, dynamic sections allow further organization of views while preserving the canonical view hierarchy.</para> 
 
<para></para>
<figure xml:id="_18_0_5_8e90292_1456268263561_414932_48269" pgwide="1"><title>Example View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456268263594_631762_48289.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456268263594_631762_48289.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_5_8e90292_1456268271938_220165_48466" pgwide="1"><title>Dynamic Section</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456268271947_566512_48486.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456268271947_566512_48486.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;Dynamic sectioning&quot; is the creation of viewpoint method defined sections. They are created using the &quot;Structured Query&quot; activity in the viewpoint method diagram.</para> 
  <para>This specific example shows the creation of a single section.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068128_505663_80535">
    [cf:Dynamic Sectioning.vlink]
   </mms-view-link></para>  
 
<figure xml:id="_18_0_5_8e90292_1456268739573_226909_48940" pgwide="1"><title>Multiple Sections</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1456268739581_594565_48961.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1456268739581_594565_48961.png"/></imageobject>
</mediaobject></figure>
 
  <para>&quot;Dynamic sectioning&quot; is the creation of viewpoint method defined sections. They are created using the &quot;Structured Query&quot; activity in the viewpoint method diagram.</para> 
  <para>This specific example shows the creation of multiple sections.</para> 
  <para>Reference: 
   <mms-view-link data-mms-element-id="_18_0_2_bec02f9_1444945068128_505663_80535">
    [cf:Dynamic Sectioning.vlink]
   </mms-view-link></para>  
 
<section xml:id="_18_0_5_8e90292_1456268272044_561442_48496">
<info><title>Example Single Section</title></info>
<section>
<info><title>Zoo Animals</title></info>
<para>Ostriches can run up to 70 km/h, the fastest land speed of any bird.</para>
<para>Basically a dinosaur.</para>
<para>Zebras feed almost entirely on grasses.</para>
<para>Mostly blubber.</para>
<para>What sound does an arctic tern make?</para>
</section>
</section>
<section xml:id="_18_0_5_8e90292_1456268662644_751888_48851">
<info><title>Example Multiple Sections</title></info>
<section>
<info><title>Ostrich</title></info>
<para>Ostriches can run up to 70 km/h, the fastest land speed of any bird.</para>
</section>
<section>
<info><title>Crocodile</title></info>
<para>Basically a dinosaur.</para>
</section>
<section>
<info><title>Zebra</title></info>
<para>Zebras feed almost entirely on grasses.</para>
</section>
<section>
<info><title>Seal</title></info>
<para>Mostly blubber.</para>
</section>
<section>
<info><title>Arctic Tern</title></info>
<para>What sound does an arctic tern make?</para>
</section>
</section>
</section>
</section>
<section xml:id="_18_5_3_8bf0285_1519239393739_629346_11725">
<info><title>Other</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>DocGen Methods</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Method Name</entry><entry>Method Description</entry></row>
</thead>
<tbody>
<row><entry><para>Simulate</para>
</entry><entry><para><p>Execute Cameo Simulation Toolkit simulation(s) and present results as table(s).</p>
</para>
</entry></row>
<row><entry><para>OpaqueBehavior Viewpoint</para>
</entry><entry><para><p>This Viewpoint demonstrates the usage pattern for an example OpaqueBehavior named <mms-cf mms-cf-type="name" mms-element-id="_18_5_3_8bf0285_1524507677405_726639_21765" non-editable="false">[cf:createTestParagraph.name]</mms-cf>. All OpaqueBehaviors used in DocGen are provided four inputs at runtime:</p>

<ul>
	<li><strong>exposedElements</strong>: The list of elements that are exposed to the Behavior as a result of the view generation.</li>
	<li><strong>forViewEditor</strong>: A boolean value that is true when the target for generation is View Editor, i.e. when it is not a local generation.</li>
	<li><strong>outputDirectory</strong>: A string with the path to the output directory when using local generation.</li>
	<li><strong>context</strong>: The gov.nasa.jpl.mbee.mdk.model.BehaviorQuery object that is executing the code. This input is exposed for advanced users, but most use cases do not need it.</li>
</ul>

<p>In this example, the OpaqueBehavior will create a Paragraph that prints all the values of the variables using Groovy. OpaqueBehaviors can return a single gov.nasa.jpl.mbee.mdk.docgen.docbook.DocumentElement or a collection of them. Any other output will be ignored and the user will be warned in the notification window. Errors in the code will also be presented in the notification window and a full stack trace will be printed to the log file.</p>

<p>See <a href="https://docs.nomagic.com/display/MD185/Creating+executable+opaque+behaviors">MagicDraw documentation for OpaqueBehaviors</a> for implementation details.</p>
</para>
</entry></row>
</tbody>
</tgroup>
</table>
<section xml:id="_18_5_3_8bf0285_1519239504722_896425_11792">
<info><title>Simulate</title></info>
<para><p>DocGen has the ability to run Cameo Simulation Tool Kit simulations when generating documents. This may be useful when trying to execute the simulations based on the most recent values and instances in line with generating documents that reference these values.</p>
</para>
<section xml:id="_18_5_3_8bf0285_1519240786343_822064_12142">
<info><title>Simulate Config</title></info>
<figure xml:id="_18_5_3_8bf0285_1519236492088_501224_4409" pgwide="1"><title>Force Simulation</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_5_3_8bf0285_1519236492133_484251_4429.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_5_3_8bf0285_1519236492133_484251_4429.png"/></imageobject>
</mediaobject></figure>
<para><p>This example simulation calculates the force applied on a point mass given its mass and acceleration.</p>
</para>
<figure xml:id="_18_5_3_8bf0285_1519236755708_901657_4916" pgwide="1"><title>Point Mass</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_5_3_8bf0285_1519236755732_789849_4936.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_5_3_8bf0285_1519236755732_789849_4936.png"/></imageobject>
</mediaobject></figure>
<para><p>This constraint applies <span>Newton&apos;s Second Law of Motion to a point mass.</span></p>
</para>
<figure xml:id="_18_5_3_8bf0285_1519238001283_631695_9905" pgwide="1"><title>System Context</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_5_3_8bf0285_1519238001315_997732_9926.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_5_3_8bf0285_1519238001315_997732_9926.png"/></imageobject>
</mediaobject></figure>
<para><p>This sequence diagram specifies how the point mass system should be executed.</p>
</para>
<figure xml:id="_18_5_3_8bf0285_1519237847739_291603_9785" pgwide="1"><title>Force Simulation</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_5_3_8bf0285_1519237847816_477071_9806.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_5_3_8bf0285_1519237847816_477071_9806.png"/></imageobject>
</mediaobject></figure>
<para><p>The SimulationConfig defines the execution target and result location such that it solves the constraint and the solved system is saved in InstanceSpecifications.</p>
</para>
<figure xml:id="_18_5_3_8bf0285_1519238434287_230217_9989" pgwide="1"><title>Simulate View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_5_3_8bf0285_1519238434314_248706_10009.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_5_3_8bf0285_1519238434314_248706_10009.png"/></imageobject>
</mediaobject></figure>
<para><p>The view that executes the simulation exposes the simulation target(s), which in this case is a SimulationConfig. The Instance Table is exposed in order to present the results of the simulation. The viewpoint filters out Diagrams inside a StructuredQuery and simulates the filtered set, which is just the SimulationConfig in the case of the example simulation. The viewpoint then filters for only Diagrams inside a StructuredQuery and presents the filtered set as tables, which is just the Instance Table in the case of the example simulation.</p>
</para>
<figure xml:id="_18_5_3_8bf0285_1519238568601_358332_10169" pgwide="1"><title>Simulate</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_5_3_8bf0285_1519238568624_239631_10190.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_5_3_8bf0285_1519238568624_239631_10190.png"/></imageobject>
</mediaobject></figure>
<para><p>Execute Cameo Simulation Toolkit simulation(s) and present results as table(s).</p>
</para>
</section>
<section xml:id="_18_5_3_8bf0285_1519238494405_201393_10024">
<info><title>Simulate Data</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Instance Table</title>
<tgroup cols="4" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name</entry><entry>mass : Real</entry><entry>acceleration : Real</entry><entry>force : Real</entry></row>
</thead>
<tbody>
<row><entry><para>pointMass1</para>
</entry><entry><para>10.0</para>
</entry><entry><para>4.0</para>
</entry><entry><para>40.0</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_5_3_8bf0285_1524508045062_449384_21846">
<info><title>OpaqueBehavior</title></info>
<figure xml:id="_18_5_3_8bf0285_1524508017333_324622_21805" pgwide="1"><title>OpaqueBehavior View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_5_3_8bf0285_1524508017362_641246_21825.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_5_3_8bf0285_1524508017362_641246_21825.png"/></imageobject>
</mediaobject></figure>
<para><p>This example View is used to demonstrate how OpaqueBehaviors can be used in DocGen to execute arbitrary code and optionally generate presentation elements in any <a href="https://en.wikipedia.org/wiki/Scripting_for_the_Java_Platform">JSR 223</a> compliant scripting language, such as Groovy, Scala, Python, etc. These OpaqueBehaviors include the code inside a model element, so they are versioned and transported with the model thus removing the need to have external dependencies to generate views (like plugins, UserScripts, etc.).</p>
</para>
<figure xml:id="_18_5_3_8bf0285_1524508139498_102233_21905" pgwide="1"><title>OpaqueBehavior Viewpoint</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_5_3_8bf0285_1524508139525_292460_21926.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_5_3_8bf0285_1524508139525_292460_21926.png"/></imageobject>
</mediaobject></figure>
<para><p>This Viewpoint demonstrates the usage pattern for an example OpaqueBehavior named <mms-cf mms-cf-type="name" mms-element-id="_18_5_3_8bf0285_1524507677405_726639_21765" non-editable="false">[cf:createTestParagraph.name]</mms-cf>. All OpaqueBehaviors used in DocGen are provided four inputs at runtime:</p>

<ul>
	<li><strong>exposedElements</strong>: The list of elements that are exposed to the Behavior as a result of the view generation.</li>
	<li><strong>forViewEditor</strong>: A boolean value that is true when the target for generation is View Editor, i.e. when it is not a local generation.</li>
	<li><strong>outputDirectory</strong>: A string with the path to the output directory when using local generation.</li>
	<li><strong>context</strong>: The gov.nasa.jpl.mbee.mdk.model.BehaviorQuery object that is executing the code. This input is exposed for advanced users, but most use cases do not need it.</li>
</ul>

<p>In this example, the OpaqueBehavior will create a Paragraph that prints all the values of the variables using Groovy. OpaqueBehaviors can return a single gov.nasa.jpl.mbee.mdk.docgen.docbook.DocumentElement or a collection of them. Any other output will be ignored and the user will be warned in the notification window. Errors in the code will also be presented in the notification window and a full stack trace will be printed to the log file.</p>

<p>See <a href="https://docs.nomagic.com/display/MD185/Creating+executable+opaque+behaviors">MagicDraw documentation for OpaqueBehaviors</a> for implementation details.</p>
</para>
<table frame="all" pgwide="1" role="longtable">
<title>Opaque Behavior Data</title>
<tgroup cols="3" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name</entry><entry>Body</entry><entry>Language</entry></row>
</thead>
<tbody>
<row><entry><para>createTestParagraph</para>
</entry><entry><para>return new gov.nasa.jpl.mbee.mdk.docgen.docbook.DBParagraph('context is "' + context + 
        '".<br />exposedElements are "' + exposedElements + 
        '".<br />forViewEditor is "' + forViewEditor + 
        '".<br />outputDirectory is "'+ outputDirectory + '".')</para>
</entry><entry><para>Groovy</para>
</entry></row>
</tbody>
</tgroup>
</table>
<para>context is "BehaviorQuery(,callBehaviorAction=com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.impl.CallBehaviorActionImpl@399c7ba3)".<br />exposedElements are "[com.nomagic.uml2.ext.magicdraw.commonbehaviors.mdbasicbehaviors.impl.OpaqueBehaviorImpl@77849822, com.nomagic.uml2.ext.magicdraw.classes.mdkernel.impl.DiagramImpl@1f6c1a01, com.nomagic.uml2.ext.magicdraw.classes.mdkernel.impl.DiagramImpl@8fecefe0]".<br />forViewEditor is "false".<br />outputDirectory is "/Users/igomes/Documents".</para>
</section>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444944906259_897463_70941">
<info><title>DocGen UserScripts</title></info>
 
  <para>This section details some of the advanced features of MDK that allow the integration of User-Scripts into your DocGen queries. Be sure to check your Project's Modeling Policy with regard to script permissions.</para> 
 
<section xml:id="_18_0_5_8e90292_1455823434638_467595_53761">
<info><title>Creating UserScripts</title></info>
 
  <orderedlist spacing="compact"> 
   <listitem><para>Create a stereotype that specializes the UserScript stereotype in the SysML Extension profile</para></listitem> 
   <listitem><para>Name the stereotype using the format &lt;namespace&gt;.&lt;scriptName&gt;</para></listitem> 
   <listitem><para>Apply the &lt;&lt;DocGenScript&gt;&gt; stereotype from SysML Extension in order to change the default interpreter language of your UserScript stereotype. The default language without the &lt;&lt;DocGenScript&gt;&gt; stereotype is Jython</para></listitem> 
   <listitem><para>Create your script under &lt;md.install.dir&gt;/DocGenUserScripts/&lt;namespace&gt; The namespace and script name will be the same as the namespace and scriptName of your stereotype</para></listitem> 
   <listitem><para>Apply your new specialized UserScript stereotype to an Action. Use this action in a&#160;Viewpoint Method. You may also select the &quot;Other (like UserScripts)&quot; Template Button in the Viewpoint Method pallette, and then type the name of&#160;your newly created UserScript.</para></listitem> 
   <listitem><para>Create a View that conforms to your Viewpoint and exposes some Element</para></listitem> 
   <listitem><para>Set the &quot;collectViewActions&quot; tag in the View to &quot;true&quot; in order to invoke the UserScript during DocGen generation. This tag is part of the &quot;view&quot; stereotype, and by default is set to &quot;false&quot;</para></listitem> 
   <listitem><para>Generate the Document locally or Generate Views and commit to MMS in order to see the output as usual</para></listitem> 
  </orderedlist> 
 
</section>
<section xml:id="_18_0_5_8e90292_1455823536756_186861_53832">
<info><title>Writing UserScripts</title></info>
 
  <para>When executing a UserScript, DocGen makes available a mapping or dictionary called &quot;scriptInput&quot;. This contains key-value mappings of information available to your script. The most important one is &quot;DocGenTargets&quot;. This contains a list of MagicDraw elements that are being passed to your script and is the starting point in the model for your script. Below is a list of inputs available:</para> 
  <itemizedlist spacing="compact"> 
   <listitem><para>DocGenTargets - list of MagicDraw elements</para></listitem> 
   <listitem><para>md_install_dir - magicdraw installation directory as a string</para></listitem> 
   <listitem><para>docgen_output_dir - if locally generating, this is the output directory as a string</para></listitem> 
   <listitem><para>ForViewEditor - boolean, whether the current execution is for the view editor</para></listitem> 
   <listitem><para>other properties defined by your stereotype*</para></listitem> 
  </itemizedlist> 
  <para>* You can define tags on your stereotype just like the built in ones have tags defined, and those will become inputs as a list. For example, if you defined &quot;booleanTag&quot; on your stereotype and on the action, the tag is set to True, you'll see scriptInput['booleanTag'] = [True]</para> 
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944938198_2778_73063">
<info><title>Presentation UserScripts</title></info>
 
  <para>For output, DocGen would be looking for a &quot;scriptOutput&quot; object with a key-value pair of &quot;DocGenOutput&quot; to be a list of DB* objects. The DB* objects are detailed in <link xlink:href="http://docgen.jpl.nasa.gov/opsrev/downloads/docgen/javadoc/">the javadoc</link>. They are basically Java class representations of Table, Paragraph, or List. Below is example code that outputs a table:</para> 
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944938199_701907_73064">
<info><title>Collect and Filter UserScripts</title></info>
 
  <para>Collect/Filter UserScripts are custom scripts that provide collect/filter capability instead of the built in ones. You can use this anywhere you can use a built in collect/filter. The setup is similar to other UserScripts except your stereotype needs to specialize the &lt;&lt;Collect/Filter Userscript&gt;&gt; stereotype.</para> 
  <para>The passed in values to the script would be the same, but DocGen would be expecting a list of elements as the output.</para> 
  <screen>#this is a script implementation of get owned elements with depth 1
targets = scriptInput['DocGenTargets']
output = []
for target in targets:
&#160;&#160;&#160;for e in target.getOwnedElement():
   &#160;&#160;&#160;output.append(e)
scriptOutput = {&quot;DocGenOutput&quot;: output}  </screen> 
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944938201_463543_73067">
<info><title>Validation UserScripts</title></info>
<para>Validation scripts can be used to output a common table layout for validation suite, rules, and violations. A validation suite consists of one or more rules, and each rule can have one or more violations. A view that conforms to a viewpoint with some validation action can also be run inside Magicdraw that's tied into the Magicdraw validation window.</para>
<para></para>
<figure xml:id="_18_0_5_8e90292_1455817437832_264699_43068" pgwide="1"><title>UserScripts</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_5_8e90292_1455817437842_630433_43088.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_5_8e90292_1455817437842_630433_43088.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_5_8e90292_1455819308195_761724_44010">
<info><title>Jython Validation Example</title></info>
<para></para>
</section>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444944906263_17470_70947">
<info><title>Create and Evaluate OCL Constraints</title></info>
 
  <para>This section is a <emphasis role="bold">brief</emphasis> introduction to Object Constraint Language (OCL) and how it is used within the MDK. It is important to note that this is not a comprehensive explanation of OCL and at any point during this tutorial if you find yourself wanting a more in-depth explanation of the language, (i.e. specific syntax rules), there are plenty of resources to be found and several are offered in the next section.</para> 
 
<section xml:id="_18_0_2_bec02f9_1444944974115_464793_75878">
<info><title>What Is OCL and Why Do I Use It?</title></info>
 
  <para>OCL Primer By Bradley Clement</para> 
  <para><emphasis role="bold">What Is OCL?</emphasis></para> 
  <para>The <link xlink:href="http://en.wikipedia.org/wiki/Object_Constraint_Language">Object Constraint Language (OCL)</link> is a text language (a subset of <link xlink:href="http://en.wikipedia.org/wiki/QVT">QVT</link>) that can be used to customize views and viewpoints in various ways that otherwise may require writing external code in Jython, QVT, Java, etc. OCL is used to define invariants of objects and pre-and post conditions of specified operations. This allows for more advanced querying of model elements and their properties. Throughout this entire section the words &quot;expression&quot; and &quot;operations&quot; will be used extensively. <emphasis role="bold">An OCL &quot;expression&quot; is a statement of OCL &quot;operations&quot; that can be pieced together to get what you want</emphasis>. These expressions can be quite simple or complex depending on the need.</para> 
  <para>For example:</para> 
  <para>1. <emphasis role="bold">n()&#160;</emphasis>&#160;</para> 
  <para>2. <emphasis role="bold">r('analysis:characterizes').oclAsType(Dependency).source.m('mass').oclAsType(Property).defaultValue.oclAsType(LiteralString)</emphasis></para> 
  <para><emphasis role="bold">.value.toInteger()=eval(self._constraintOfConstrainedElement-&gt;asSequence()-&gt;at(1).oclAsType(Constraint)</emphasis></para> 
  <para><emphasis role="bold">.specification.oclAsType(OpaqueExpression)._body-&gt;at(1))</emphasis></para> 
  <para>Both 1 and 2 are OCL expressions, however, it is obvious to see that number 2 is quite a bit more complex. Number 1 is a single <emphasis role="bold">operation</emphasis> that stands alone as an <emphasis role="bold">expression</emphasis>. It is important to note that these expressions are built by stringing along carefully selected operations and separating them with the proper syntax. In the complex example above you will notice a lot of periods (.) and arrows (-&gt;). Both of these symbols separate one piece of the expression from the next (there are more than just these two).&#160; It will take some practice to understand which to use and when to use it. For a more extensive/advanced explanation of OCL syntax check out this <link xlink:href="http://santos.cis.ksu.edu/771-Distribution/Reading/Richters_2001_OCL.pdf">link</link>. </para> 
  <para><emphasis role="bold">Why Do I Use OCL?</emphasis></para> 
  <para>You can use OCL to specify how to collect, filter, sort, constrain, and present model data. Constraints on model elements are the driving force behind MDK and the inter-workings of certain elements presented earlier in this document will be explained via OCL. Several new elements that were created specifically for dealing with OCL expressions within a viewpoint will be introduced as well. For your everyday collect and filters of model elements OCL probably isn't the best choice, however, for more advanced queries of the model it can be your golden ticket. Examples outlining this idea will follow.&#160;</para> 
  <para>OCL syntax can be tricky since it accesses model information through the UML metamodel (see the UML metamodel manual in your Magicdraw installation directory, under manual).&#160; Here we try to give some tips on how to write OCL expressions to more easily customize views without having to write external scripts in Jython, Java, QVT, etc. Keep in mind, this topic is more advanced than previous ones discussed earlier in this document. At this point it is assumed that you understand how a viewpoint method diagram works and can walk step by step from one action to the next and comprehend what elements should be expected in the final result. This is important because OCL expressions work the same way.</para>  
  <para><emphasis role="bold">OCL Resources</emphasis></para> 
  <para>For help with OCL, you can try the <a href="../../share/proxy/alfresco/api/node/content/workspace/SpacesStore/7f555c97-f20a-46da-b572-1c4b02c48b01/ocl-ref-short.pdf?a=true">OCL Cheat Sheet</a> or search the web for example OCL.&#160; Some examples will also be given in the sections below. The OCL Cheat Sheet is very helpful once you get a basic understanding of how OCL works, however, until you have gained some understanding it might be confusing. In the following sections some references to this resource will be made with explanations of how it can be useful.&#160;</para> 
  <para>NoMagic's UML metamodel specifies what objects can be referenced in an OCL expression for the different UML types. &#160;A pdf manual of the metamodel can be found in your MagicDraw installation in the manual folder. &#160;If you use Eclipse, try opening the Metamodel Explorer view from the menu: Window -&gt; Show View -&gt; Other. &#160;There may be many metamodels, but look for the com.nomagic.uml2 metamodel. &#160;There is a button on the view where you can search for a type, but be careful since there may be more than one UML metamodel.&#160; You want MagicDraw's UML metamodel. &#160; There is also a button for showing inherited members that can be referenced in OCL.</para> 
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944974122_8381_75889">
<info><title>What are the OCL Black Box Expressions?</title></info>
 
  <para>Black box operations are often used to simplify expression structure. The following section will cover several of these so that you will recognize them.&#160; However, before discussing the black box operations it is important to talk about the viewpoint method action &lt;&lt;TableExpressionColumn&gt;&gt; since it will be used in the following example viewpoint methods.</para> 
  <para>&lt;&lt;<emphasis role="bold">TableExpressionColumn</emphasis>&gt;&gt; Applies an OCL expression to the target elements in a &lt;&lt;TableStructure&gt;&gt; that will populate a column of the table displayed in View Editor. &#160;This can be used to chain operations on elements and relationships that would otherwise be difficult or impossible.</para> 
  <para>Make sure to focus directly on this action in the examples. Understanding how they handle OCL expressions is important.</para> 
  <para>Another critical topic before moving on is the idea of &quot;<emphasis role="bold">casting</emphasis>&quot; in your OCL expressions. Many times when a result is returned from an OCL operation it will need to be cast as the element expected from the query in order for further operations to be carried out. This is the nature of OCL and just takes getting used to. Often times errors can be fixed by remembering to cast the returned elements. The cheat sheet discussed earlier gives the operations needed for casting. They are shown below and will be implemented and explained in the following examples. Remember to come back and reference these operations while working through the examples.&#160;&#160;</para> 
  <para>Below are the OCL black box operations used as shorthand in expressions. They will be demonstrated in the following sections.</para> 
  <itemizedlist spacing="compact"> 
   <listitem><para><emphasis role="bold">m(), member(), or members()</emphasis> returns the owned elements</para></listitem> 
  </itemizedlist> 
  <itemizedlist spacing="compact"> 
   <listitem><para><emphasis role="bold">r(), relationship(), or relationships()</emphasis> returns all relationships owned or for which the element is a target</para></listitem> 
   <listitem><para><emphasis role="bold">n(), name(), or names()</emphasis> return the name</para></listitem> 
   <listitem><para><emphasis role="bold">t(), types()</emphasis> return all types (Stereotypes, metaclass, and Java classes and interfaces).</para></listitem> 
   <listitem><para><emphasis role="bold">type()</emphasis> returns just the type of the element selected.</para></listitem> 
   <listitem><para><emphasis role="bold">s(), stereotype(), or stereotypes()</emphasis> returns the Stereotypes.&#160; This is basically short for appliedStereotypeInstance.classifier.&#160; s() and stereotypes() should return all stereotypes, and stereotype() should just return one.</para></listitem> 
   <listitem><para><emphasis role="bold">e(), evaluate(), or eval() </emphasis>evaluates an ocl expression retrieved from an element</para></listitem> 
   <listitem><para><emphasis role="bold">value()</emphasis> returns the value of a property or slot</para></listitem> 
   <listitem><para><emphasis role="bold">owners()</emphasis> returns owner and owner's owners, recursively</para></listitem> 
   <listitem><para><emphasis role="bold">log()</emphasis> prints to Notification Window</para></listitem> 
   <listitem><para><emphasis role="bold">run(View/Viewpoint)</emphasis> runs DocGen on a single View or Viewpoint with specified inputs and gets the result</para></listitem> 
  </itemizedlist> 
  <para>Many of these views reference results of the example viewpoints. These results are similar to those found in the&#160;
   <mms-view-link class="mceNonEditable" mms-doc-id="_18_0_2_bec02f9_1444945724397_976938_181418" data-mms-element-id="_18_0_2_bec02f9_1444944964084_465461_75540">
    [cf:Present Model Data.vlink]
   </mms-view-link>&#160;view.</para> 
 
<figure xml:id="_18_0_6_bec02f9_1492547229539_651803_245501" pgwide="1"><title>Animals</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492547229550_691564_245521.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492547229550_691564_245521.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_2_bec02f9_1444945080364_616063_81052">
<info><title>value()</title></info>
 
  <para>The expression <emphasis role="bold">value()</emphasis> is a useful tool to get at the value of a property. In the example below the Animals package was exposed to the viewpoint method diagram shown. Inspecting the expression [ <emphasis role="bold">self.get('noise').v().v()</emphasis> ] shows <emphasis role="bold">get()</emphasis> collecting the elements named &quot;noise,&quot; in this case all the properties. <emphasis role="bold">v()</emphasis> is then used twice, once to get the property default value, literal string. It is then used again to get the text of the literal string.&#160;</para>  
 
<figure xml:id="_18_0_6_bec02f9_1492545842237_165566_244441" pgwide="1"><title>value() View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492545842252_531664_244461.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492545842252_531664_244461.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_2_bec02f9_1444945208499_838542_90458" pgwide="1"><title>Value Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945208521_427757_90480.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945208521_427757_90480.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492546768241_128255_244941">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title></title>
<tgroup cols="1" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Animal Noises</entry></row>
</thead>
<tbody>
<row><entry><para>meow</para>
</entry></row>
<row><entry><para>quack</para>
</entry></row>
<row><entry><para>moo</para>
</entry></row>
<row><entry><para>ribbit</para>
</entry></row>
<row><entry><para>bark</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080345_604004_81045">
<info><title>Relationships "r()"</title></info>
 
  <para>The following is an outline of the operation r(). The viewpoint method below is designed in such a way that it will use r() by itself and also part of a more complex expression. The bullet list below will run through the explanations of the OCL expressions used in the &lt;&lt;TableExpressionColumn&gt;&gt; below.</para>  
  <itemizedlist spacing="compact"> 
   <listitem><para><emphasis role="bold">r(), relationship(), or relationships()</emphasis> returns all relationships owned.&#160; 
    <itemizedlist spacing="compact"> 
     <listitem><para><emphasis role="bold">r('likes')</emphasis> in the first &lt;&lt;TableExpressionColumn&gt;&gt; gets all of the relationships of name or type 'likes'</para></listitem> 
     <listitem><para><emphasis role="bold">r('likes').oclAsType(Dependency).target&#160;</emphasis>in the second &lt;&lt;TableExpressionColumn&gt;&gt; gets the 'likes' relationship, casts it as Dependency then collects the target of the relationship (Cat). Keep in mind, when <emphasis role="bold">r()</emphasis> returns the relationship 'likes,' in order to keep performing operations we have to cast what was returned. This is done by <emphasis role="bold">oclAsType()</emphasis>. Look over the cheat sheet discussed earlier to become more familiar with these operations.</para></listitem> 
     <listitem><para>Note: ignore the filters in the viewpoint method diagram, they are unimportant to the concept covered in this section.&#160;</para></listitem> 
     <listitem><para>Notice the &lt;&lt;TableExpressionColumn&gt;&gt; activities are where the OCL expressions are defined in the viewpoint method diagram.</para></listitem> 
    </itemizedlist> </para></listitem> 
  </itemizedlist> 
 
<figure xml:id="_18_0_6_bec02f9_1492547053219_48053_245388" pgwide="1"><title>relationships() View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492547053232_713006_245408.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492547053232_713006_245408.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_6_bec02f9_1492547480050_931283_246156" pgwide="1"><title>Relationships Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492547480063_834083_246177.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492547480063_834083_246177.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492547030046_641103_245320">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Relationships</title>
<tgroup cols="3" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name of element</entry><entry>Likes Relationships</entry><entry>Likes Target</entry></row>
</thead>
<tbody>
<row><entry><para>Dog</para>
</entry><entry><para>likes</para>
</entry><entry><para>Cat</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080348_415969_81046">
<info><title>Names "n()"</title></info>
  
  <itemizedlist spacing="compact"> 
   <listitem><para><emphasis role="bold">n(), name(), or names()</emphasis> returns the name</para></listitem> 
  </itemizedlist> 
  <para>For this example, expression &quot;n()&quot; returns the name of the element passed to the action. In this case &quot;Dog.&quot;&#160;</para> 
 
<figure xml:id="_18_0_6_bec02f9_1492548391404_430911_246740" pgwide="1"><title>Names View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492548391419_276804_246760.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492548391419_276804_246760.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_2_bec02f9_1444945197334_921451_90217" pgwide="1"><title>Names Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945197376_913696_90239.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945197376_913696_90239.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492548459843_135667_246861">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title></title>
<tgroup cols="1" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name of Element</entry></row>
</thead>
<tbody>
<row><entry><para>Dog</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080350_744713_81047">
<info><title>Stereotypes "s()"</title></info>
 
  <itemizedlist spacing="compact"> 
   <listitem><para><emphasis role="bold">s(), stereotype(), or stereotypes()</emphasis> returns the Stereotypes.&#160; This is basically short for appliedStereotypeInstance.classifier.&#160; <emphasis role="bold">s()</emphasis> and <emphasis role="bold">stereotypes()</emphasis> should return all stereotypes, and <emphasis role="bold">stereotype()</emphasis> should just return one.&#160;</para></listitem> 
  </itemizedlist> 
  <para>For this example, Dog is exposed and it's stereotypes populated into&#160;a table.</para> 
 
<figure xml:id="_18_0_6_bec02f9_1492548877666_997028_247767" pgwide="1"><title>Stereotypes View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492548877678_56489_247787.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492548877678_56489_247787.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_6_bec02f9_1492548759520_105111_247324" pgwide="1"><title>Stereotypes Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492548759532_896659_247345.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492548759532_896659_247345.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492548620024_40935_247117">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Stereotypes</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name of element</entry><entry>Stereotype of Element</entry></row>
</thead>
<tbody>
<row><entry><para>Dog</para>
</entry><entry><para>Block</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080353_24138_81048">
<info><title>Members "m()"</title></info>
 
  <itemizedlist spacing="compact"> 
   <listitem><para><emphasis role="bold">m(), member(), or members()</emphasis> returns the owned elements 
    <itemizedlist spacing="compact"> 
     <listitem><para>m('text') gets the member whose name or type is 'text'</para></listitem> 
    </itemizedlist> </para></listitem> 
  </itemizedlist> 
  <para>Example:</para> 
  <itemizedlist spacing="compact"> 
   <listitem><para>Since the element Dog is again exposed, <emphasis role="bold">m('noise') </emphasis>will get the member whose name is 'noise' and post that name to the Attributes column of some particular table.&#160;</para></listitem> 
   <listitem><para>Notice in the &lt;&lt;TableExpressionColumn&gt;&gt; actions of the viewpoint method are using different OCL expressions. The &quot;Attributes&quot; column is returning any member who's name is 'noise'. The expression in the &quot;Attribute Default Value&quot; action is collecting the same property, casting it as a Property and then returning the default value. This is done by:&#160; <emphasis role="bold">m('noise').oclAsType(Property).defaultValue</emphasis>.</para></listitem> 
  </itemizedlist> 
 
<figure xml:id="_18_0_6_bec02f9_1492549185161_273808_248414" pgwide="1"><title>Members View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492549185174_308579_248434.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492549185174_308579_248434.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_6_bec02f9_1492549044853_481301_248095" pgwide="1"><title>Members Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492549044866_981532_248116.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492549044866_981532_248116.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492549144935_586251_248328">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Members</title>
<tgroup cols="3" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name of element</entry><entry>Attributes</entry><entry>Attribute Default Value</entry></row>
</thead>
<tbody>
<row><entry><para>Dog</para>
</entry><entry><para>noise</para>
</entry><entry><para>bark</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080359_998247_81050">
<info><title>Evaluate "eval()"</title></info>
 
  <para><emphasis role="bold">eval()</emphasis> or <emphasis role="bold">e()</emphasis> evaluates an OCL expression retrieved from an element. This example may seem overwhelmingly complex, however, the main point is to demonstrate the use of the black box expression. The image below shows an element (Propulsion Subsystem) which has a set constraint (red arrow).</para> 
  <para>This is a constrained element with the constraint specification:</para>  
  <para>The example expression is long but take the time to try and piece it together to help your understanding. A useful hint is to start with the oclAsType() operations since these will give you a clue as to what was returned by the previous operation.</para> 
  <para>This is eval() taking in the constrained element and evaluating the constraint:</para>  
  <para>This is the complete viewpoint method diagram:</para>  
 
<figure xml:id="_18_0_6_bec02f9_1492550060948_254563_249082" pgwide="1"><title>Evaluate View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492550060958_811033_249102.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492550060958_811033_249102.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_2_bec02f9_1444945203662_835195_90336" pgwide="1"><title>Evaluate Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945203690_197979_90358.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945203690_197979_90358.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_6_bec02f9_1492549975334_442198_248916" pgwide="1"><title>Transclusion Test Model</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492549975347_186612_248936.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492549975347_186612_248936.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492549337121_899302_248672">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title></title>
<tgroup cols="3" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Component Name</entry><entry>CBE Mass</entry><entry>Rollup Number</entry></row>
</thead>
<tbody>
<row><entry><para>Propulsion Subsystem</para>
</entry><entry></entry><entry><para>0</para>
</entry></row>
<row><entry><para>Launch Mass</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Steady-State Power</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>On</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Off</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Standby</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Hydrazine Tank</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Launch Mass</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Steady-State Power</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>On</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Off</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Standby</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Thruster</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Launch Mass</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Steady-State Power</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>On</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Off</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Standby</para>
</entry><entry></entry><entry><para></para>
</entry></row>
<row><entry><para>Transclusion Test Model</para>
</entry><entry></entry><entry><para></para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080356_738747_81049">
<info><title>Types "t()"</title></info>
 
  <para><emphasis role="bold">t()</emphasis> returns the type(s) of the element selected where as, <emphasis role="bold">type()</emphasis> only returns the type of the element exposed re. Element &quot;Dog&quot; is of type Class and has other types associated with it. We would like to return just the type of element Dog, therefore, we use <emphasis role="bold">type()</emphasis> in the &lt;&lt;TableExpressionColumn&gt;&gt;.</para> 
  <para><emphasis role="bold">Note: the other information returned with Class is an artifact of MagicDraw.</emphasis></para>  
 
<figure xml:id="_18_0_6_bec02f9_1492550277651_287413_249329" pgwide="1"><title>Types View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492550277666_926609_249349.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492550277666_926609_249349.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_2_bec02f9_1444945201477_474779_90289" pgwide="1"><title>Types Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945201517_236716_90311.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945201517_236716_90311.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492550297890_488173_249429">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title>Types</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name of element</entry><entry>Type of Element</entry></row>
</thead>
<tbody>
<row><entry><para>Dog</para>
</entry><entry><para>interface com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080335_74389_81040">
<info><title>Owners "owners()"</title></info>
 
  <para>Returns owner and owner's owners, recursively. In the example below, the OCL evaluation tool is used to collect the owners of the element &quot;Dog&quot; In the results of the evaluation box, the owning packages and model are shown. Note: the fist part of the expression (<emphasis role="bold">self.</emphasis>) is specifying the target element. The operation would work without it since it is just one element being exposed.</para> 
  <para>The red arrows below show the package hierarchy collected.</para> 
 
<figure xml:id="_18_0_6_bec02f9_1492550926019_26675_249774" pgwide="1"><title>Owners View DIagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492550926030_958996_249794.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492550926030_958996_249794.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_2_bec02f9_1444945205673_442341_90386" pgwide="1"><title>Owners Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945205699_790293_90408.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945205699_790293_90408.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492550936789_760617_249808">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title></title>
<tgroup cols="1" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Owners</entry></row>
</thead>
<tbody>
<row><entry><para>Animals</para>
<para>Present Model Data</para>
<para>Create Viewpoint Methods Examples</para>
<para>Models</para>
<para>Docgen</para>
<para>Data</para>
</entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080338_966016_81041">
<info><title>log()</title></info>
 
  <para><emphasis role="bold">UNDER CONSTRUCTION </emphasis></para> 
  <para>The <emphasis role="bold">log()</emphasis> black box expression takes the elements collected at any point in an OCL expression and prints them in the notification window in Magic Draw. In this example, the OCL query shown in the OCL Evaluator (discussed later) was run on the &quot;Animals&quot; package. This expression collects the owned elements of the package. Notice, in the comparison of the OCL Evaluation (top) window and the Notification Window (bottom), the elements displayed are the same. The red and blue arrows correspond to the same elements.&#160;</para>  
 
<figure xml:id="_18_0_6_bec02f9_1492551548973_185784_256063" pgwide="1"><title>Log View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492551548985_5793_256083.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492551548985_5793_256083.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_2_bec02f9_1444945209424_463982_90505" pgwide="1"><title>Log Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945209446_547408_90527.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945209446_547408_90527.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492551555998_441886_256097">
<info><title>Example View</title></info>
<para></para>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444945080340_904215_81042">
<info><title>run(View/Viewpoint)</title></info>
 
  <para>One way to use <emphasis role="bold">run()</emphasis> is to first collect a viewpoint and then run it on the element selected. The first viewpoint method below has an OCL expression in the &lt;&lt;TableExpressionColumn&gt;&gt; activity: <emphasis role="bold">self.get('testforrun').run(self).</emphasis> Dissecting the expression shows the viewpoint titled &quot;testforrun&quot; was collected using get(). (<emphasis role="bold">NOTE: get() is a very useful expression when selecting a specific element)</emphasis>. Next, the operation <emphasis role="bold">run()</emphasis> took the viewpoint and ran it against all elements that were not filtered out earlier. At this point in the method, these elements would be classified as &quot;<emphasis role="bold">self</emphasis>.&quot; The second viewpoint method diagram shown below is &quot;testforrun.&quot; As each element (self) is passed to the viewpoint via <emphasis role="bold">run()</emphasis>, their name is collected and returned to the &lt;&lt;TableExpressionColumn&gt;&gt; action.</para> 
 
<figure xml:id="_18_0_6_bec02f9_1492551724379_696836_256420" pgwide="1"><title>RunViewViewpoint View Diagram</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_6_bec02f9_1492551724396_686872_256440.svg" format="SVG"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_6_bec02f9_1492551724396_686872_256440.png"/></imageobject>
</mediaobject></figure>
<figure xml:id="_18_0_2_bec02f9_1444945206646_496745_90409" pgwide="1"><title>Run Black Box Demo</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945206674_103207_90432.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945206674_103207_90432.png"/></imageobject>
</mediaobject></figure>
<section xml:id="_18_0_6_bec02f9_1492551733236_835527_256454">
<info><title>Example View</title></info>
<table frame="all" pgwide="1" role="longtable">
<title></title>
<tgroup cols="1" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Animals</entry></row>
</thead>
<tbody>
<row><entry></entry></row>
<row><entry></entry></row>
<row><entry></entry></row>
<row><entry></entry></row>
<row><entry></entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444944942237_928377_73196">
<info><title>How Do I Use OCL Expressions in a Viewpoint?</title></info>
 
  <para>OCL expressions can be used in viewpoint methods in various ways to do various things. The following sections will outline some of these functions.</para> 
 
<section xml:id="_18_0_2_bec02f9_1444944972302_520725_75843">
<info><title>Using Collect/Filter/Sort by Expression</title></info>
 
  <para>To more easily introduce OCL Expressions into viewpoint methods, several custom actions have been provided and can be found in the tool bar of viewpoint method diagrams along with the other collect and filter actions discussed in previous sections. A brief description of each follows below. Each action's specification window has a designated tag to enter the desired OCL expression.</para> 
  <para><emphasis role="bold">Viewpoint Elements&#160; </emphasis></para> 
  <para>&lt;&lt;<emphasis role="bold">CollectByExpression</emphasis>&gt;&gt; Collect elements using an OCL expression.&#160; This works like other collect stereotypes.</para> 
  <para>&lt;&lt;<emphasis role="bold">FilterByExpression</emphasis>&gt;&gt; Filter a collection using an OCL expression.&#160; &#160; This works like other filter stereotypes.</para> 
  <para>&lt;&lt;<emphasis role="bold">SortByExpression</emphasis>&gt;&gt; Sort a collection using an OCL expression.&#160; &#160; This works like other sort stereotypes.</para> 
  <para>&lt;&lt;<emphasis role="bold">Constraint</emphasis>&gt;&gt; You can add this stereotype to a comment or an action in an activity diagram to evaluate an OCL expression on the action's results.&#160; The expression should return true or false.&#160; If false, the constraint is violated, and the violation will be added to the validation results panel.&#160; A constraint comment can be anchored to multiple actions to apply to all of the actions' results separately.</para> 
  <para>&lt;&lt;<emphasis role="bold">TableExpressionColumn</emphasis>&gt;&gt; Apply an OCL expression to the target elements. &#160;This can be used to chain operations on elements and relatonships that would be otherwise be difficult or impossible.</para> 
  <para><emphasis role="bold">&lt;&lt;ViewpointConstraint&gt;&gt;</emphasis> Allows a constraint to be evaluated at any point in a viewpoint method diagram on any elements passed to the action.&#160;</para> 
  <para><emphasis role="bold">zz</emphasis>&lt;&lt;<emphasis role="bold">CustomTable</emphasis>&gt;&gt; A CustomTable allows columns to all be specified as OCL expressions in one viewpoint element. &#160;Target elements each have a row in the table. &#160;Title, headings, and captions are specified as with other tables.</para> 
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944972305_321421_75845">
<info><title>Advanced Topics</title></info>
 
  <para>View Currently Under Construction</para> 
 
<section xml:id="_18_0_2_bec02f9_1444944972303_180798_75844">
<info><title>Use of the Iterate Flag</title></info>
<para></para>
</section>
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444944974112_169006_75876">
<info><title>What is the OCL Evaluator and Why Do I Use It?</title></info>
 
  <para>This tool is <emphasis role="bold">EXTREMELY </emphasis>helpful since many times your OCL query needs to be pieced together in order to get the results you want. All of the OCL expressions discussed in the above sections can be reproduced in the the OCL Evaluator directly in Magic Draw. For example, the image below demonstrates how the expression used in section &quot;8.2.10 value()&quot; would operate in the OCL Evaluator tool. Notice <emphasis role="bold">.ownedElement</emphasis> was added to collect the elements of the package. This was not needed in the viewpoint method of 8.2.10 because the elements were already collected and filtered.&#160;</para>  
  <para>As you can see, this feature allows you to see what results your expression will return without needing to export your view to View Editor. This can save you a lot of time.</para> 
  <para>To try it for yourself, follow these steps:</para> 
  <orderedlist spacing="compact"> 
   <listitem><para>selecting some model element(s) in a diagram or the containment tree,</para></listitem> 
   <listitem><para>finding the MDK menu, and</para></listitem> 
   <listitem><para>selecting &quot;Run OCL Query.&quot;&#160;</para></listitem> 
   <listitem><para>You may need to resize the popup window to see the entry fields.&#160;</para></listitem> 
   <listitem><para>Enter an expression in OCL, hit Evaluate, and see the result (or error).</para></listitem> 
  </orderedlist> 
  <para><emphasis role="bold">Note: &quot;self.n()&quot; in the below examples is setting the target of the OCL expression. </emphasis></para>   
  <para>There are four parts to the OCL Evaluator:</para> 
  <para>1. Expression entry</para>  
  <para>In this area you can enter an OCL query and recall previously evaluated queries by clicking on the arrow on the right hand side of the field.</para> 
  <para>2. Results</para>  
  <para>This is where the results of the query are displayed.</para> 
  <para>3. Query completion suggestions</para>  
  <para>This field suggests potential options for the current result of your query.</para> 
  <para>4. Selection location</para>  
  <para>This allows you to select from which location &quot;self.n()&quot; or the target of the query should be taken from.</para>  
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944942240_421521_73203">
<info><title>How Do I Use OCL Viewpoint Constraints?</title></info>
 
  <para>In this example the package OCL Viewpoint Contraints contains a &lt;&lt;requirement&gt;&gt; that has two dependency relationships stereotyped &lt;&lt;mission:specifies&gt;&gt;. One of these relationships violates a set pattern for what a requirement can specify. The viewpoint method shown below contains a &lt;&lt;ViewpointConstraint&gt;&gt; action which will validate elements passed in with a specified OCL expression. This is the expression used :</para> 
  <para><emphasis role="bold">r('mission:specifies').oclAsType(Dependency).target.oclIsKindOf(Relationship).validationReport</emphasis></para> 
  <para>A breakdown of the expression:</para> 
  <para>- starts with selecting the mission:specifies relationship using <emphasis role="bold">r()</emphasis></para> 
  <para>- then casts the values returned as dependencies using .<emphasis role="bold">oclAsType(Dependency)</emphasis></para> 
  <para>- then selects the targets of the dependencies with <emphasis role="bold">.target</emphasis></para> 
  <para>- then casts the returned values as relationships using .<emphasis role="bold">oclIsKindOf(Relationship)</emphasis></para> 
  <para>- finally, signals return of a validation report (first two tables show below) with <emphasis role="bold">.validationReport</emphasis></para> 
  <para>The validation reports are automatically generated and populated with error data. One being a summary and one detailed.</para> 
  <para>Since the requirement in the OCL Viewpoint Constraints package has a dependency with another type of relationship as the target an error will be thrown.The element which violates this constraint is then sent to table structure and populated into the last table shown below. In this case, &quot;Requirement Name!!&quot; is expected to be the final result.</para> 
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944942235_357043_73194">
<info><title>How Do I Create OCL Rules?</title></info>
<section xml:id="_18_0_2_bec02f9_1444944970441_474834_75810">
<info><title>How Do I Create Rules on Specific Model Elements? (Constraint Evaluator)</title></info>
 
  <para>The diagram below contains a &lt;&lt;block&gt;&gt; named &quot;Commented Block.&quot; Attached to this element are two constraints...</para> 
  <para>1. oclIsKindOf(Comment)</para> 
  <para>2. oclIsKindOf(Class)</para>   
 
<figure xml:id="_18_0_2_bec02f9_1444945075362_489794_80890" pgwide="1"><title>How Do I Create Rules on Specific Model Elements?</title>
<mediaobject><imageobject role="fo">
<imagedata fileref="images/_18_0_2_bec02f9_1444945075391_433459_80912.svg" format="SVG" scalefit="1" width="100%"/>
</imageobject><imageobject role="html"><imagedata fileref="images/_18_0_2_bec02f9_1444945075391_433459_80912.png"/></imageobject>
</mediaobject></figure>
 
  <para>To validate these constraints directly in the model, select the element and right click, navigate to MDK, Validate constraints. See image below. Obviously, one of these constraints is true and one is false, so only one warning should be thrown. This is shown in the image below. The red arrow points out the failed constraint in the Magic Draw Notification window.</para> 
  <para>Obviously, one of these constraints is true and one is false, so only one warning should be thrown. This is shown in the image below. The red arrow points out the failed constraint in the Magic Draw Notification window.</para> 
 
</section>
<section xml:id="_18_0_2_bec02f9_1444944970443_762875_75811">
<info><title>How Do I Create Rules Within Viewpoints?</title></info>
<para></para>
</section>
<section xml:id="_18_0_2_bec02f9_1444944970444_887455_75812">
<info><title>How Do I Validate OCL Rules in my Model?</title></info>
 
  <para>There are two methods for validating OCL queries in a model, via a right click and via the MD Validation Window.&#160;</para> 
  <para>To validate OCL rules using the right click menu, select the package containing the elements to be validated and select MDK -&gt; Validate Constraints</para> 
 
</section>
</section>
<section xml:id="_18_0_2_bec02f9_1444944942236_663191_73195">
<info><title>How Do I Create Expression Libraries?</title></info>
<para></para>
</section>
<section xml:id="_18_0_2_bec02f9_1444944942234_813501_73193">
<info><title>How Do I Use RegEx In my Queries?</title></info>
<para>http://www.vogella.com/tutorials/JavaRegularExpressions/article.html
http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html</para>
</section>
<section xml:id="_18_0_2_bec02f9_1444944942233_724594_73192">
<info><title>How Do I Create Transclusions with OCL Queries?</title></info>
<table frame="all" pgwide="1" role="longtable">
<title></title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name</entry><entry>Documentation</entry></row>
</thead>
<tbody>
<row><entry><para>How Do I Create Transclusions with OCL Queries?</para>
</entry><entry><para></para>
</entry></row>
</tbody>
</tgroup>
</table>
<table frame="all" pgwide="1" role="longtable">
<title></title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Name (from constructed Transclusion)</entry><entry>Documentation (from constructed Transclusion)</entry></row>
</thead>
<tbody>
<row><entry></entry><entry></entry></row>
</tbody>
</tgroup>
</table>
</section>
</section>
</chapter>
</book>